2025-06-16 13:24:29,646:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-16 13:24:29,646:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-16 13:24:29,646:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-16 13:24:29,647:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-16 13:24:36,904:INFO:PyCaret ClassificationExperiment
2025-06-16 13:24:36,904:INFO:Logging name: clf-default-name
2025-06-16 13:24:36,904:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 13:24:36,904:INFO:version 3.3.2
2025-06-16 13:24:36,904:INFO:Initializing setup()
2025-06-16 13:24:36,905:INFO:self.USI: 65f8
2025-06-16 13:24:36,905:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 13:24:36,905:INFO:Checking environment
2025-06-16 13:24:36,905:INFO:python_version: 3.10.18
2025-06-16 13:24:36,905:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 13:24:36,905:INFO:machine: AMD64
2025-06-16 13:24:36,905:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 13:24:36,905:INFO:Memory: svmem(total=8362713088, available=1457590272, percent=82.6, used=6905122816, free=1457590272)
2025-06-16 13:24:36,920:INFO:Physical Core: 4
2025-06-16 13:24:36,920:INFO:Logical Core: 8
2025-06-16 13:24:36,920:INFO:Checking libraries
2025-06-16 13:24:36,920:INFO:System:
2025-06-16 13:24:36,920:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 13:24:36,920:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 13:24:36,920:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 13:24:36,920:INFO:PyCaret required dependencies:
2025-06-16 13:24:37,659:INFO:                 pip: 25.1
2025-06-16 13:24:37,659:INFO:          setuptools: 80.9.0
2025-06-16 13:24:37,659:INFO:             pycaret: 3.3.2
2025-06-16 13:24:37,659:INFO:             IPython: 8.37.0
2025-06-16 13:24:37,659:INFO:          ipywidgets: 8.1.7
2025-06-16 13:24:37,659:INFO:                tqdm: 4.67.1
2025-06-16 13:24:37,659:INFO:               numpy: 1.24.4
2025-06-16 13:24:37,659:INFO:              pandas: 2.1.4
2025-06-16 13:24:37,659:INFO:              jinja2: 3.1.6
2025-06-16 13:24:37,659:INFO:               scipy: 1.11.4
2025-06-16 13:24:37,659:INFO:              joblib: 1.3.2
2025-06-16 13:24:37,659:INFO:             sklearn: 1.4.2
2025-06-16 13:24:37,659:INFO:                pyod: 2.0.5
2025-06-16 13:24:37,659:INFO:            imblearn: 0.13.0
2025-06-16 13:24:37,659:INFO:   category_encoders: 2.7.0
2025-06-16 13:24:37,659:INFO:            lightgbm: 4.6.0
2025-06-16 13:24:37,659:INFO:               numba: 0.57.1
2025-06-16 13:24:37,659:INFO:            requests: 2.32.4
2025-06-16 13:24:37,659:INFO:          matplotlib: 3.7.5
2025-06-16 13:24:37,661:INFO:          scikitplot: 0.3.7
2025-06-16 13:24:37,661:INFO:         yellowbrick: 1.5
2025-06-16 13:24:37,661:INFO:              plotly: 5.24.1
2025-06-16 13:24:37,661:INFO:    plotly-resampler: Not installed
2025-06-16 13:24:37,661:INFO:             kaleido: 0.2.1
2025-06-16 13:24:37,661:INFO:           schemdraw: 0.15
2025-06-16 13:24:37,661:INFO:         statsmodels: 0.14.4
2025-06-16 13:24:37,661:INFO:              sktime: 0.26.0
2025-06-16 13:24:37,662:INFO:               tbats: 1.1.3
2025-06-16 13:24:37,662:INFO:            pmdarima: 2.0.4
2025-06-16 13:24:37,662:INFO:              psutil: 7.0.0
2025-06-16 13:24:37,662:INFO:          markupsafe: 3.0.2
2025-06-16 13:24:37,662:INFO:             pickle5: Not installed
2025-06-16 13:24:37,662:INFO:         cloudpickle: 3.1.1
2025-06-16 13:24:37,662:INFO:         deprecation: 2.1.0
2025-06-16 13:24:37,662:INFO:              xxhash: 3.5.0
2025-06-16 13:24:37,663:INFO:           wurlitzer: Not installed
2025-06-16 13:24:37,663:INFO:PyCaret optional dependencies:
2025-06-16 13:24:37,993:INFO:                shap: Not installed
2025-06-16 13:24:37,993:INFO:           interpret: Not installed
2025-06-16 13:24:37,993:INFO:                umap: Not installed
2025-06-16 13:24:37,993:INFO:     ydata_profiling: 4.16.1
2025-06-16 13:24:37,993:INFO:  explainerdashboard: Not installed
2025-06-16 13:24:37,993:INFO:             autoviz: Not installed
2025-06-16 13:24:37,993:INFO:           fairlearn: Not installed
2025-06-16 13:24:37,993:INFO:          deepchecks: Not installed
2025-06-16 13:24:37,993:INFO:             xgboost: Not installed
2025-06-16 13:24:37,993:INFO:            catboost: Not installed
2025-06-16 13:24:37,993:INFO:              kmodes: Not installed
2025-06-16 13:24:37,993:INFO:             mlxtend: Not installed
2025-06-16 13:24:37,993:INFO:       statsforecast: Not installed
2025-06-16 13:24:37,994:INFO:        tune_sklearn: Not installed
2025-06-16 13:24:37,994:INFO:                 ray: Not installed
2025-06-16 13:24:37,994:INFO:            hyperopt: Not installed
2025-06-16 13:24:37,994:INFO:              optuna: Not installed
2025-06-16 13:24:37,994:INFO:               skopt: Not installed
2025-06-16 13:24:37,994:INFO:              mlflow: 3.1.0
2025-06-16 13:24:37,994:INFO:              gradio: Not installed
2025-06-16 13:24:37,994:INFO:             fastapi: 0.115.12
2025-06-16 13:24:37,994:INFO:             uvicorn: 0.34.3
2025-06-16 13:24:37,994:INFO:              m2cgen: Not installed
2025-06-16 13:24:37,994:INFO:           evidently: Not installed
2025-06-16 13:24:37,994:INFO:               fugue: Not installed
2025-06-16 13:24:37,994:INFO:           streamlit: Not installed
2025-06-16 13:24:37,994:INFO:             prophet: Not installed
2025-06-16 13:24:37,994:INFO:None
2025-06-16 13:24:37,994:INFO:Set up data.
2025-06-16 13:24:38,273:INFO:Set up folding strategy.
2025-06-16 13:24:38,273:INFO:Set up train/test split.
2025-06-16 13:24:38,365:INFO:Set up index.
2025-06-16 13:24:38,366:INFO:Assigning column types.
2025-06-16 13:24:38,372:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-16 13:24:38,420:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,427:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,495:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,496:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,573:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,573:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,615:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-16 13:24:38,689:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,731:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,731:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,803:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:24:38,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,841:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-16 13:24:38,920:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:38,920:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:39,006:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:39,006:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:39,041:INFO:Preparing preprocessing pipeline...
2025-06-16 13:24:39,103:INFO:Set up label encoding.
2025-06-16 13:24:39,103:INFO:Set up simple imputation.
2025-06-16 13:24:39,111:INFO:Set up encoding of ordinal features.
2025-06-16 13:24:39,116:INFO:Set up encoding of categorical features.
2025-06-16 13:24:39,116:INFO:Set up removing multicollinearity.
2025-06-16 13:24:39,116:INFO:Set up column transformation.
2025-06-16 13:24:39,116:INFO:Set up feature normalization.
2025-06-16 13:24:39,117:INFO:Set up column name cleaning.
2025-06-16 13:24:39,488:INFO:Finished creating preprocessing pipeline.
2025-06-16 13:24:39,563:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-06-16 13:24:39,563:INFO:Creating final display dataframe.
2025-06-16 13:24:40,057:INFO:Setup _display_container:                     Description              Value
0                    Session id               8385
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment       MlflowLogger
27              Experiment Name   clf-default-name
28                          USI               65f8
2025-06-16 13:24:40,240:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:40,240:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:40,315:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:40,315:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:24:40,316:INFO:Logging experiment in loggers
2025-06-16 13:29:25,874:INFO:PyCaret ClassificationExperiment
2025-06-16 13:29:25,874:INFO:Logging name: clf-default-name
2025-06-16 13:29:25,874:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 13:29:25,875:INFO:version 3.3.2
2025-06-16 13:29:25,875:INFO:Initializing setup()
2025-06-16 13:29:25,875:INFO:self.USI: 5ad9
2025-06-16 13:29:25,875:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 13:29:25,875:INFO:Checking environment
2025-06-16 13:29:25,875:INFO:python_version: 3.10.18
2025-06-16 13:29:25,875:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 13:29:25,875:INFO:machine: AMD64
2025-06-16 13:29:25,875:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 13:29:25,875:INFO:Memory: svmem(total=8362713088, available=1320812544, percent=84.2, used=7041900544, free=1320812544)
2025-06-16 13:29:25,875:INFO:Physical Core: 4
2025-06-16 13:29:25,875:INFO:Logical Core: 8
2025-06-16 13:29:25,875:INFO:Checking libraries
2025-06-16 13:29:25,875:INFO:System:
2025-06-16 13:29:25,875:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 13:29:25,875:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 13:29:25,876:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 13:29:25,876:INFO:PyCaret required dependencies:
2025-06-16 13:29:25,876:INFO:                 pip: 25.1
2025-06-16 13:29:25,876:INFO:          setuptools: 80.9.0
2025-06-16 13:29:25,876:INFO:             pycaret: 3.3.2
2025-06-16 13:29:25,876:INFO:             IPython: 8.37.0
2025-06-16 13:29:25,876:INFO:          ipywidgets: 8.1.7
2025-06-16 13:29:25,876:INFO:                tqdm: 4.67.1
2025-06-16 13:29:25,876:INFO:               numpy: 1.24.4
2025-06-16 13:29:25,876:INFO:              pandas: 2.1.4
2025-06-16 13:29:25,876:INFO:              jinja2: 3.1.6
2025-06-16 13:29:25,876:INFO:               scipy: 1.11.4
2025-06-16 13:29:25,876:INFO:              joblib: 1.3.2
2025-06-16 13:29:25,876:INFO:             sklearn: 1.4.2
2025-06-16 13:29:25,876:INFO:                pyod: 2.0.5
2025-06-16 13:29:25,876:INFO:            imblearn: 0.13.0
2025-06-16 13:29:25,876:INFO:   category_encoders: 2.7.0
2025-06-16 13:29:25,876:INFO:            lightgbm: 4.6.0
2025-06-16 13:29:25,876:INFO:               numba: 0.57.1
2025-06-16 13:29:25,876:INFO:            requests: 2.32.4
2025-06-16 13:29:25,876:INFO:          matplotlib: 3.7.5
2025-06-16 13:29:25,876:INFO:          scikitplot: 0.3.7
2025-06-16 13:29:25,877:INFO:         yellowbrick: 1.5
2025-06-16 13:29:25,877:INFO:              plotly: 5.24.1
2025-06-16 13:29:25,877:INFO:    plotly-resampler: Not installed
2025-06-16 13:29:25,877:INFO:             kaleido: 0.2.1
2025-06-16 13:29:25,877:INFO:           schemdraw: 0.15
2025-06-16 13:29:25,877:INFO:         statsmodels: 0.14.4
2025-06-16 13:29:25,877:INFO:              sktime: 0.26.0
2025-06-16 13:29:25,877:INFO:               tbats: 1.1.3
2025-06-16 13:29:25,877:INFO:            pmdarima: 2.0.4
2025-06-16 13:29:25,877:INFO:              psutil: 7.0.0
2025-06-16 13:29:25,877:INFO:          markupsafe: 3.0.2
2025-06-16 13:29:25,877:INFO:             pickle5: Not installed
2025-06-16 13:29:25,877:INFO:         cloudpickle: 3.1.1
2025-06-16 13:29:25,877:INFO:         deprecation: 2.1.0
2025-06-16 13:29:25,877:INFO:              xxhash: 3.5.0
2025-06-16 13:29:25,877:INFO:           wurlitzer: Not installed
2025-06-16 13:29:25,877:INFO:PyCaret optional dependencies:
2025-06-16 13:29:25,877:INFO:                shap: Not installed
2025-06-16 13:29:25,877:INFO:           interpret: Not installed
2025-06-16 13:29:25,877:INFO:                umap: Not installed
2025-06-16 13:29:25,877:INFO:     ydata_profiling: 4.16.1
2025-06-16 13:29:25,877:INFO:  explainerdashboard: Not installed
2025-06-16 13:29:25,877:INFO:             autoviz: Not installed
2025-06-16 13:29:25,877:INFO:           fairlearn: Not installed
2025-06-16 13:29:25,878:INFO:          deepchecks: Not installed
2025-06-16 13:29:25,878:INFO:             xgboost: Not installed
2025-06-16 13:29:25,878:INFO:            catboost: Not installed
2025-06-16 13:29:25,878:INFO:              kmodes: Not installed
2025-06-16 13:29:25,878:INFO:             mlxtend: Not installed
2025-06-16 13:29:25,878:INFO:       statsforecast: Not installed
2025-06-16 13:29:25,878:INFO:        tune_sklearn: Not installed
2025-06-16 13:29:25,878:INFO:                 ray: Not installed
2025-06-16 13:29:25,878:INFO:            hyperopt: Not installed
2025-06-16 13:29:25,878:INFO:              optuna: Not installed
2025-06-16 13:29:25,878:INFO:               skopt: Not installed
2025-06-16 13:29:25,878:INFO:              mlflow: 3.1.0
2025-06-16 13:29:25,878:INFO:              gradio: Not installed
2025-06-16 13:29:25,878:INFO:             fastapi: 0.115.12
2025-06-16 13:29:25,878:INFO:             uvicorn: 0.34.3
2025-06-16 13:29:25,878:INFO:              m2cgen: Not installed
2025-06-16 13:29:25,878:INFO:           evidently: Not installed
2025-06-16 13:29:25,878:INFO:               fugue: Not installed
2025-06-16 13:29:25,878:INFO:           streamlit: Not installed
2025-06-16 13:29:25,878:INFO:             prophet: Not installed
2025-06-16 13:29:25,878:INFO:None
2025-06-16 13:29:25,878:INFO:Set up data.
2025-06-16 13:31:41,561:INFO:PyCaret ClassificationExperiment
2025-06-16 13:31:41,561:INFO:Logging name: clf-default-name
2025-06-16 13:31:41,561:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 13:31:41,561:INFO:version 3.3.2
2025-06-16 13:31:41,561:INFO:Initializing setup()
2025-06-16 13:31:41,561:INFO:self.USI: c85b
2025-06-16 13:31:41,561:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 13:31:41,561:INFO:Checking environment
2025-06-16 13:31:41,561:INFO:python_version: 3.10.18
2025-06-16 13:31:41,561:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 13:31:41,561:INFO:machine: AMD64
2025-06-16 13:31:41,561:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 13:31:41,561:INFO:Memory: svmem(total=8362713088, available=1216823296, percent=85.4, used=7145889792, free=1216823296)
2025-06-16 13:31:41,561:INFO:Physical Core: 4
2025-06-16 13:31:41,561:INFO:Logical Core: 8
2025-06-16 13:31:41,561:INFO:Checking libraries
2025-06-16 13:31:41,561:INFO:System:
2025-06-16 13:31:41,561:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 13:31:41,561:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 13:31:41,563:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 13:31:41,563:INFO:PyCaret required dependencies:
2025-06-16 13:31:41,563:INFO:                 pip: 25.1
2025-06-16 13:31:41,563:INFO:          setuptools: 80.9.0
2025-06-16 13:31:41,563:INFO:             pycaret: 3.3.2
2025-06-16 13:31:41,563:INFO:             IPython: 8.37.0
2025-06-16 13:31:41,563:INFO:          ipywidgets: 8.1.7
2025-06-16 13:31:41,563:INFO:                tqdm: 4.67.1
2025-06-16 13:31:41,563:INFO:               numpy: 1.24.4
2025-06-16 13:31:41,563:INFO:              pandas: 2.1.4
2025-06-16 13:31:41,563:INFO:              jinja2: 3.1.6
2025-06-16 13:31:41,563:INFO:               scipy: 1.11.4
2025-06-16 13:31:41,563:INFO:              joblib: 1.3.2
2025-06-16 13:31:41,563:INFO:             sklearn: 1.4.2
2025-06-16 13:31:41,563:INFO:                pyod: 2.0.5
2025-06-16 13:31:41,563:INFO:            imblearn: 0.13.0
2025-06-16 13:31:41,563:INFO:   category_encoders: 2.7.0
2025-06-16 13:31:41,563:INFO:            lightgbm: 4.6.0
2025-06-16 13:31:41,563:INFO:               numba: 0.57.1
2025-06-16 13:31:41,563:INFO:            requests: 2.32.4
2025-06-16 13:31:41,563:INFO:          matplotlib: 3.7.5
2025-06-16 13:31:41,563:INFO:          scikitplot: 0.3.7
2025-06-16 13:31:41,563:INFO:         yellowbrick: 1.5
2025-06-16 13:31:41,564:INFO:              plotly: 5.24.1
2025-06-16 13:31:41,564:INFO:    plotly-resampler: Not installed
2025-06-16 13:31:41,564:INFO:             kaleido: 0.2.1
2025-06-16 13:31:41,564:INFO:           schemdraw: 0.15
2025-06-16 13:31:41,564:INFO:         statsmodels: 0.14.4
2025-06-16 13:31:41,564:INFO:              sktime: 0.26.0
2025-06-16 13:31:41,564:INFO:               tbats: 1.1.3
2025-06-16 13:31:41,564:INFO:            pmdarima: 2.0.4
2025-06-16 13:31:41,564:INFO:              psutil: 7.0.0
2025-06-16 13:31:41,564:INFO:          markupsafe: 3.0.2
2025-06-16 13:31:41,564:INFO:             pickle5: Not installed
2025-06-16 13:31:41,564:INFO:         cloudpickle: 3.1.1
2025-06-16 13:31:41,564:INFO:         deprecation: 2.1.0
2025-06-16 13:31:41,564:INFO:              xxhash: 3.5.0
2025-06-16 13:31:41,564:INFO:           wurlitzer: Not installed
2025-06-16 13:31:41,564:INFO:PyCaret optional dependencies:
2025-06-16 13:31:41,564:INFO:                shap: Not installed
2025-06-16 13:31:41,564:INFO:           interpret: Not installed
2025-06-16 13:31:41,564:INFO:                umap: Not installed
2025-06-16 13:31:41,564:INFO:     ydata_profiling: 4.16.1
2025-06-16 13:31:41,564:INFO:  explainerdashboard: Not installed
2025-06-16 13:31:41,564:INFO:             autoviz: Not installed
2025-06-16 13:31:41,565:INFO:           fairlearn: Not installed
2025-06-16 13:31:41,565:INFO:          deepchecks: Not installed
2025-06-16 13:31:41,565:INFO:             xgboost: Not installed
2025-06-16 13:31:41,565:INFO:            catboost: Not installed
2025-06-16 13:31:41,565:INFO:              kmodes: Not installed
2025-06-16 13:31:41,565:INFO:             mlxtend: Not installed
2025-06-16 13:31:41,565:INFO:       statsforecast: Not installed
2025-06-16 13:31:41,565:INFO:        tune_sklearn: Not installed
2025-06-16 13:31:41,565:INFO:                 ray: Not installed
2025-06-16 13:31:41,565:INFO:            hyperopt: Not installed
2025-06-16 13:31:41,565:INFO:              optuna: Not installed
2025-06-16 13:31:41,565:INFO:               skopt: Not installed
2025-06-16 13:31:41,565:INFO:              mlflow: 3.1.0
2025-06-16 13:31:41,565:INFO:              gradio: Not installed
2025-06-16 13:31:41,565:INFO:             fastapi: 0.115.12
2025-06-16 13:31:41,565:INFO:             uvicorn: 0.34.3
2025-06-16 13:31:41,565:INFO:              m2cgen: Not installed
2025-06-16 13:31:41,565:INFO:           evidently: Not installed
2025-06-16 13:31:41,565:INFO:               fugue: Not installed
2025-06-16 13:31:41,565:INFO:           streamlit: Not installed
2025-06-16 13:31:41,565:INFO:             prophet: Not installed
2025-06-16 13:31:41,565:INFO:None
2025-06-16 13:31:41,565:INFO:Set up data.
2025-06-16 13:31:41,571:INFO:Set up folding strategy.
2025-06-16 13:31:41,571:INFO:Set up train/test split.
2025-06-16 13:31:41,579:INFO:Set up index.
2025-06-16 13:31:41,580:INFO:Assigning column types.
2025-06-16 13:31:41,583:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-16 13:31:41,656:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 13:31:41,658:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:31:41,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:41,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:41,803:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 13:31:41,803:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:31:41,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:41,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:41,832:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-16 13:31:41,907:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:31:41,942:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:41,943:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,040:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 13:31:42,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,102:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-16 13:31:42,232:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,233:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,351:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,351:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:42,352:INFO:Preparing preprocessing pipeline...
2025-06-16 13:31:42,354:INFO:Set up label encoding.
2025-06-16 13:31:42,354:INFO:Set up simple imputation.
2025-06-16 13:31:42,358:INFO:Set up encoding of ordinal features.
2025-06-16 13:31:42,361:INFO:Set up encoding of categorical features.
2025-06-16 13:31:42,361:INFO:Set up removing multicollinearity.
2025-06-16 13:31:42,361:INFO:Set up column transformation.
2025-06-16 13:31:42,361:INFO:Set up feature normalization.
2025-06-16 13:31:42,362:INFO:Set up column name cleaning.
2025-06-16 13:31:42,632:INFO:Finished creating preprocessing pipeline.
2025-06-16 13:31:42,701:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-06-16 13:31:42,701:INFO:Creating final display dataframe.
2025-06-16 13:31:44,853:INFO:Setup _display_container:                     Description              Value
0                    Session id               5924
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment       MlflowLogger
27              Experiment Name   clf-default-name
28                          USI               c85b
2025-06-16 13:31:45,007:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:45,008:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:45,133:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:45,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 13:31:45,135:INFO:Logging experiment in loggers
2025-06-16 19:10:48,364:INFO:PyCaret ClassificationExperiment
2025-06-16 19:10:48,368:INFO:Logging name: clf-default-name
2025-06-16 19:10:48,368:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 19:10:48,368:INFO:version 3.3.2
2025-06-16 19:10:48,368:INFO:Initializing setup()
2025-06-16 19:10:48,368:INFO:self.USI: b972
2025-06-16 19:10:48,368:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 19:10:48,368:INFO:Checking environment
2025-06-16 19:10:48,373:INFO:python_version: 3.10.18
2025-06-16 19:10:48,373:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 19:10:48,375:INFO:machine: AMD64
2025-06-16 19:10:48,375:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 19:10:48,400:INFO:Memory: svmem(total=8362713088, available=1455939584, percent=82.6, used=6906773504, free=1455939584)
2025-06-16 19:10:48,400:INFO:Physical Core: 4
2025-06-16 19:10:48,400:INFO:Logical Core: 8
2025-06-16 19:10:48,400:INFO:Checking libraries
2025-06-16 19:10:48,400:INFO:System:
2025-06-16 19:10:48,408:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 19:10:48,408:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 19:10:48,408:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 19:10:48,408:INFO:PyCaret required dependencies:
2025-06-16 19:10:48,416:INFO:                 pip: 25.1
2025-06-16 19:10:48,416:INFO:          setuptools: 80.9.0
2025-06-16 19:10:48,416:INFO:             pycaret: 3.3.2
2025-06-16 19:10:48,416:INFO:             IPython: 8.37.0
2025-06-16 19:10:48,416:INFO:          ipywidgets: 8.1.7
2025-06-16 19:10:48,416:INFO:                tqdm: 4.67.1
2025-06-16 19:10:48,416:INFO:               numpy: 1.24.4
2025-06-16 19:10:48,416:INFO:              pandas: 2.1.4
2025-06-16 19:10:48,416:INFO:              jinja2: 3.1.6
2025-06-16 19:10:48,416:INFO:               scipy: 1.11.4
2025-06-16 19:10:48,420:INFO:              joblib: 1.3.2
2025-06-16 19:10:48,420:INFO:             sklearn: 1.4.2
2025-06-16 19:10:48,420:INFO:                pyod: 2.0.5
2025-06-16 19:10:48,420:INFO:            imblearn: 0.13.0
2025-06-16 19:10:48,420:INFO:   category_encoders: 2.7.0
2025-06-16 19:10:48,420:INFO:            lightgbm: 4.6.0
2025-06-16 19:10:48,420:INFO:               numba: 0.57.1
2025-06-16 19:10:48,420:INFO:            requests: 2.32.4
2025-06-16 19:10:48,420:INFO:          matplotlib: 3.7.5
2025-06-16 19:10:48,420:INFO:          scikitplot: 0.3.7
2025-06-16 19:10:48,420:INFO:         yellowbrick: 1.5
2025-06-16 19:10:48,422:INFO:              plotly: 5.24.1
2025-06-16 19:10:48,422:INFO:    plotly-resampler: Not installed
2025-06-16 19:10:48,422:INFO:             kaleido: 0.2.1
2025-06-16 19:10:48,422:INFO:           schemdraw: 0.15
2025-06-16 19:10:48,422:INFO:         statsmodels: 0.14.4
2025-06-16 19:10:48,422:INFO:              sktime: 0.26.0
2025-06-16 19:10:48,422:INFO:               tbats: 1.1.3
2025-06-16 19:10:48,422:INFO:            pmdarima: 2.0.4
2025-06-16 19:10:48,422:INFO:              psutil: 7.0.0
2025-06-16 19:10:48,422:INFO:          markupsafe: 3.0.2
2025-06-16 19:10:48,422:INFO:             pickle5: Not installed
2025-06-16 19:10:48,424:INFO:         cloudpickle: 3.1.1
2025-06-16 19:10:48,424:INFO:         deprecation: 2.1.0
2025-06-16 19:10:48,424:INFO:              xxhash: 3.5.0
2025-06-16 19:10:48,425:INFO:           wurlitzer: Not installed
2025-06-16 19:10:48,425:INFO:PyCaret optional dependencies:
2025-06-16 19:10:48,425:INFO:                shap: Not installed
2025-06-16 19:10:48,425:INFO:           interpret: Not installed
2025-06-16 19:10:48,425:INFO:                umap: Not installed
2025-06-16 19:10:48,427:INFO:     ydata_profiling: 4.16.1
2025-06-16 19:10:48,427:INFO:  explainerdashboard: Not installed
2025-06-16 19:10:48,427:INFO:             autoviz: Not installed
2025-06-16 19:10:48,427:INFO:           fairlearn: Not installed
2025-06-16 19:10:48,427:INFO:          deepchecks: Not installed
2025-06-16 19:10:48,427:INFO:             xgboost: Not installed
2025-06-16 19:10:48,427:INFO:            catboost: Not installed
2025-06-16 19:10:48,427:INFO:              kmodes: Not installed
2025-06-16 19:10:48,427:INFO:             mlxtend: Not installed
2025-06-16 19:10:48,429:INFO:       statsforecast: Not installed
2025-06-16 19:10:48,429:INFO:        tune_sklearn: Not installed
2025-06-16 19:10:48,429:INFO:                 ray: Not installed
2025-06-16 19:10:48,429:INFO:            hyperopt: Not installed
2025-06-16 19:10:48,429:INFO:              optuna: Not installed
2025-06-16 19:10:48,429:INFO:               skopt: Not installed
2025-06-16 19:10:48,429:INFO:              mlflow: 3.1.0
2025-06-16 19:10:48,429:INFO:              gradio: Not installed
2025-06-16 19:10:48,429:INFO:             fastapi: 0.115.12
2025-06-16 19:10:48,431:INFO:             uvicorn: 0.34.3
2025-06-16 19:10:48,431:INFO:              m2cgen: Not installed
2025-06-16 19:10:48,431:INFO:           evidently: Not installed
2025-06-16 19:10:48,431:INFO:               fugue: Not installed
2025-06-16 19:10:48,431:INFO:           streamlit: Not installed
2025-06-16 19:10:48,431:INFO:             prophet: Not installed
2025-06-16 19:10:48,431:INFO:None
2025-06-16 19:10:48,433:INFO:Set up data.
2025-06-16 19:10:48,993:INFO:Set up folding strategy.
2025-06-16 19:10:48,998:INFO:Set up train/test split.
2025-06-16 19:10:49,065:INFO:Set up index.
2025-06-16 19:10:49,072:INFO:Assigning column types.
2025-06-16 19:10:49,088:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-16 19:10:49,254:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 19:10:49,270:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 19:10:49,371:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,378:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,522:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 19:10:49,524:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 19:10:49,608:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,608:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,608:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-16 19:10:49,739:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 19:10:49,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:49,962:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 19:10:50,053:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,053:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,053:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-16 19:10:50,266:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,266:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,482:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,482:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:50,507:INFO:Preparing preprocessing pipeline...
2025-06-16 19:10:50,507:INFO:Set up label encoding.
2025-06-16 19:10:50,515:INFO:Set up simple imputation.
2025-06-16 19:10:50,523:INFO:Set up encoding of ordinal features.
2025-06-16 19:10:50,532:INFO:Set up encoding of categorical features.
2025-06-16 19:10:50,532:INFO:Set up removing multicollinearity.
2025-06-16 19:10:50,532:INFO:Set up column transformation.
2025-06-16 19:10:50,540:INFO:Set up feature normalization.
2025-06-16 19:10:50,542:INFO:Set up column name cleaning.
2025-06-16 19:10:51,259:INFO:Finished creating preprocessing pipeline.
2025-06-16 19:10:51,374:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-06-16 19:10:51,374:INFO:Creating final display dataframe.
2025-06-16 19:10:52,595:INFO:Setup _display_container:                     Description              Value
0                    Session id               2006
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment              False
27              Experiment Name   clf-default-name
28                          USI               b972
2025-06-16 19:10:53,001:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:53,003:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:53,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:53,291:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 19:10:53,301:INFO:setup() successfully completed in 5.11s...............
2025-06-16 19:12:05,679:INFO:Initializing create_model()
2025-06-16 19:12:05,679:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:12:05,679:INFO:Checking exceptions
2025-06-16 19:12:09,268:INFO:Importing libraries
2025-06-16 19:12:09,268:INFO:Copying training dataset
2025-06-16 19:12:09,277:INFO:Defining folds
2025-06-16 19:12:09,277:INFO:Declaring metric variables
2025-06-16 19:12:09,287:INFO:Importing untrained model
2025-06-16 19:12:09,298:INFO:Random Forest Classifier Imported successfully
2025-06-16 19:12:09,317:INFO:Starting cross validation
2025-06-16 19:12:09,334:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:13:04,529:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,529:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,550:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,550:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,552:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,552:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,554:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:13:04,554:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:13:04,554:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:13:04,562:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,562:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,562:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,562:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,562:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:13:04,638:INFO:Calculating mean and std
2025-06-16 19:13:04,646:INFO:Creating metrics dataframe
2025-06-16 19:13:04,678:INFO:Finalizing model
2025-06-16 19:13:05,530:INFO:Uploading results into container
2025-06-16 19:13:05,530:INFO:Uploading model into container now
2025-06-16 19:13:05,560:INFO:_master_model_container: 1
2025-06-16 19:13:05,560:INFO:_display_container: 2
2025-06-16 19:13:05,560:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False)
2025-06-16 19:13:05,560:INFO:create_model() successfully completed......................................
2025-06-16 19:20:34,892:INFO:Initializing get_config()
2025-06-16 19:20:34,892:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, variable=None)
2025-06-16 19:21:07,504:INFO:Initializing get_config()
2025-06-16 19:21:07,509:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, variable=X_test)
2025-06-16 19:21:07,509:INFO:Variable: 'X_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_test_transformed' instead.
2025-06-16 19:21:07,512:INFO:Variable:  returned as       Age  Gender  Protein1  Protein2  Protein3  Protein4 Tumour_Stage  \
158  48.0  FEMALE  -0.38123  -0.47456  0.567280 -0.306940           II   
26   47.0  FEMALE   0.33186  -0.32765  0.003379  1.165800           II   
282  53.0  FEMALE   0.26748   1.67730 -0.175360  0.465650          III   
28   59.0  FEMALE  -0.33045   1.43530 -0.608000 -0.350700          III   
271  68.0    MALE   1.47040   0.46900  0.135540 -0.289840           II   
..    ...     ...       ...       ...       ...       ...          ...   
13   52.0  FEMALE  -1.68280   0.72722  0.056773 -1.244100           II   
178  48.0  FEMALE  -0.64398  -0.59363 -0.109740 -1.602800          III   
180  52.0  FEMALE   1.09020   2.76600 -0.556810 -0.475860           II   
80   85.0  FEMALE   0.40384   0.48825  0.841110  0.616450          III   
187  52.0  FEMALE   0.44520   0.81938 -0.438670 -0.007896           II   

                          Histology HER2 status                 Surgery_type  
158  Infiltrating Lobular Carcinoma    Negative  Modified Radical Mastectomy  
26               Mucinous Carcinoma    Negative                   Lumpectomy  
282   Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
28    Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
271   Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
..                              ...         ...                          ...  
13    Infiltrating Ductal Carcinoma    Negative            Simple Mastectomy  
178   Infiltrating Ductal Carcinoma    Negative                        Other  
180   Infiltrating Ductal Carcinoma    Negative            Simple Mastectomy  
80    Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
187   Infiltrating Ductal Carcinoma    Negative                        Other  

[96 rows x 10 columns]
2025-06-16 19:21:07,512:INFO:get_config() successfully completed......................................
2025-06-16 19:21:30,057:INFO:Initializing get_config()
2025-06-16 19:21:30,057:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, variable=X_test_transformed)
2025-06-16 19:21:30,118:INFO:Variable: X_test returned as           Age     Gender  Protein1  Protein2  Protein3  Protein4  \
158 -0.854032  -0.095564 -0.718356 -1.560706  1.141430 -0.580126   
26  -0.943652  -0.095564  0.685218 -1.405171  0.311269  2.152001   
282 -0.421079  -0.095564  0.537424  0.826621 -0.010885  0.731064   
28   0.068867  -0.095564 -0.633557  0.548971 -0.922583 -0.645778   
271  0.753267  10.464225  3.909577 -0.540350  0.528148 -0.554266   
..        ...        ...       ...       ...       ...       ...   
13  -0.505752  -0.095564 -2.477104 -0.252746  0.400947 -1.859496   
178 -0.854032  -0.095564 -1.131406 -1.686047  0.111277 -2.297156   
180 -0.505752  -0.095564  2.712878  2.093718 -0.805467 -0.829631   
80   1.916979  -0.095564  0.855274 -0.519012  1.476180  1.020671   
187 -0.505752  -0.095564  0.955245 -0.149418 -0.544437 -0.109005   

     Tumour_Stage_II  Tumour_Stage_III  Tumour_Stage_I  \
158         0.884454         -0.575609       -0.484393   
26          0.884454         -0.575609       -0.484393   
282        -1.130642          1.737292       -0.484393   
28         -1.130642          1.737292       -0.484393   
271         0.884454         -0.575609       -0.484393   
..               ...               ...             ...   
13          0.884454         -0.575609       -0.484393   
178        -1.130642          1.737292       -0.484393   
180         0.884454         -0.575609       -0.484393   
80         -1.130642          1.737292       -0.484393   
187         0.884454         -0.575609       -0.484393   

     Histology_Infiltrating Lobular Carcinoma  \
158                                  1.638088   
26                                  -0.610468   
282                                 -0.610468   
28                                  -0.610468   
271                                 -0.610468   
..                                        ...   
13                                  -0.610468   
178                                 -0.610468   
180                                 -0.610468   
80                                  -0.610468   
187                                 -0.610468   

     Histology_Infiltrating Ductal Carcinoma  Histology_Mucinous Carcinoma  \
158                                -1.516083                     -0.180860   
26                                 -1.516083                      5.529144   
282                                 0.659595                     -0.180860   
28                                  0.659595                     -0.180860   
271                                 0.659595                     -0.180860   
..                                       ...                           ...   
13                                  0.659595                     -0.180860   
178                                 0.659595                     -0.180860   
180                                 0.659595                     -0.180860   
80                                  0.659595                     -0.180860   
187                                 0.659595                     -0.180860   

     HER2 status  Surgery_type_Other  Surgery_type_Simple Mastectomy  \
158    -0.332495           -0.687992                       -0.484393   
26     -0.332495           -0.687992                       -0.484393   
282    -0.332495           -0.687992                       -0.484393   
28     -0.332495           -0.687992                       -0.484393   
271    -0.332495           -0.687992                       -0.484393   
..           ...                 ...                             ...   
13     -0.332495           -0.687992                        2.064438   
178    -0.332495            1.453505                       -0.484393   
180    -0.332495           -0.687992                        2.064438   
80     -0.332495           -0.687992                       -0.484393   
187    -0.332495            1.453505                       -0.484393   

     Surgery_type_Lumpectomy  Surgery_type_Modified Radical Mastectomy  
158                -0.547723                                  1.696229  
26                  1.825742                                 -0.589543  
282                -0.547723                                  1.696229  
28                 -0.547723                                  1.696229  
271                -0.547723                                  1.696229  
..                       ...                                       ...  
13                 -0.547723                                 -0.589543  
178                -0.547723                                 -0.589543  
180                -0.547723                                 -0.589543  
80                 -0.547723                                  1.696229  
187                -0.547723                                 -0.589543  

[96 rows x 17 columns]
2025-06-16 19:21:30,118:INFO:get_config() successfully completed......................................
2025-06-16 19:21:56,485:INFO:Initializing get_config()
2025-06-16 19:21:56,485:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, variable=target_param)
2025-06-16 19:21:56,485:INFO:Variable:  returned as Patient_Status
2025-06-16 19:21:56,485:INFO:get_config() successfully completed......................................
2025-06-16 19:22:13,521:INFO:Initializing compare_models()
2025-06-16 19:22:13,521:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-06-16 19:22:13,521:INFO:Checking exceptions
2025-06-16 19:22:15,170:INFO:Preparing display monitor
2025-06-16 19:22:15,225:INFO:Initializing Logistic Regression
2025-06-16 19:22:15,225:INFO:Total runtime is 0.0 minutes
2025-06-16 19:22:15,234:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:15,235:INFO:Initializing create_model()
2025-06-16 19:22:15,236:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:15,236:INFO:Checking exceptions
2025-06-16 19:22:15,236:INFO:Importing libraries
2025-06-16 19:22:15,236:INFO:Copying training dataset
2025-06-16 19:22:15,242:INFO:Defining folds
2025-06-16 19:22:15,242:INFO:Declaring metric variables
2025-06-16 19:22:15,252:INFO:Importing untrained model
2025-06-16 19:22:15,267:INFO:Logistic Regression Imported successfully
2025-06-16 19:22:15,283:INFO:Starting cross validation
2025-06-16 19:22:15,293:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:37,047:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,047:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,049:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,051:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,057:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,057:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:37,067:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:37,067:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,067:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,071:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,071:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,073:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:37,103:INFO:Calculating mean and std
2025-06-16 19:22:37,113:INFO:Creating metrics dataframe
2025-06-16 19:22:37,126:INFO:Uploading results into container
2025-06-16 19:22:37,128:INFO:Uploading model into container now
2025-06-16 19:22:37,133:INFO:_master_model_container: 2
2025-06-16 19:22:37,133:INFO:_display_container: 3
2025-06-16 19:22:37,137:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2006, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-16 19:22:37,139:INFO:create_model() successfully completed......................................
2025-06-16 19:22:38,013:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:38,013:INFO:Creating metrics dataframe
2025-06-16 19:22:38,128:INFO:Initializing K Neighbors Classifier
2025-06-16 19:22:38,133:INFO:Total runtime is 0.38179947932561237 minutes
2025-06-16 19:22:38,140:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:38,143:INFO:Initializing create_model()
2025-06-16 19:22:38,143:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:38,143:INFO:Checking exceptions
2025-06-16 19:22:38,144:INFO:Importing libraries
2025-06-16 19:22:38,144:INFO:Copying training dataset
2025-06-16 19:22:38,162:INFO:Defining folds
2025-06-16 19:22:38,163:INFO:Declaring metric variables
2025-06-16 19:22:38,177:INFO:Importing untrained model
2025-06-16 19:22:38,185:INFO:K Neighbors Classifier Imported successfully
2025-06-16 19:22:38,210:INFO:Starting cross validation
2025-06-16 19:22:38,215:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:39,197:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:39,197:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:39,207:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:39,210:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:39,216:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:39,220:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,812:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,821:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,825:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,833:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,833:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,840:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:46,843:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,880:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,890:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,897:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:46,921:INFO:Calculating mean and std
2025-06-16 19:22:46,925:INFO:Creating metrics dataframe
2025-06-16 19:22:46,938:INFO:Uploading results into container
2025-06-16 19:22:46,941:INFO:Uploading model into container now
2025-06-16 19:22:46,943:INFO:_master_model_container: 3
2025-06-16 19:22:46,944:INFO:_display_container: 3
2025-06-16 19:22:46,946:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-16 19:22:46,946:INFO:create_model() successfully completed......................................
2025-06-16 19:22:47,245:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:47,245:INFO:Creating metrics dataframe
2025-06-16 19:22:47,287:INFO:Initializing Naive Bayes
2025-06-16 19:22:47,287:INFO:Total runtime is 0.5343641440073649 minutes
2025-06-16 19:22:47,303:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:47,304:INFO:Initializing create_model()
2025-06-16 19:22:47,304:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:47,304:INFO:Checking exceptions
2025-06-16 19:22:47,304:INFO:Importing libraries
2025-06-16 19:22:47,304:INFO:Copying training dataset
2025-06-16 19:22:47,313:INFO:Defining folds
2025-06-16 19:22:47,313:INFO:Declaring metric variables
2025-06-16 19:22:47,328:INFO:Importing untrained model
2025-06-16 19:22:47,343:INFO:Naive Bayes Imported successfully
2025-06-16 19:22:47,364:INFO:Starting cross validation
2025-06-16 19:22:47,372:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:47,967:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,969:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,971:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,977:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,979:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,979:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,983:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,983:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,983:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:47,985:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,987:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,989:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:47,990:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,993:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,993:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:47,995:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,002:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,021:INFO:Calculating mean and std
2025-06-16 19:22:48,023:INFO:Creating metrics dataframe
2025-06-16 19:22:48,029:INFO:Uploading results into container
2025-06-16 19:22:48,029:INFO:Uploading model into container now
2025-06-16 19:22:48,033:INFO:_master_model_container: 4
2025-06-16 19:22:48,033:INFO:_display_container: 3
2025-06-16 19:22:48,033:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-16 19:22:48,033:INFO:create_model() successfully completed......................................
2025-06-16 19:22:48,292:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:48,292:INFO:Creating metrics dataframe
2025-06-16 19:22:48,313:INFO:Initializing Decision Tree Classifier
2025-06-16 19:22:48,313:INFO:Total runtime is 0.5514693697293599 minutes
2025-06-16 19:22:48,323:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:48,323:INFO:Initializing create_model()
2025-06-16 19:22:48,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:48,327:INFO:Checking exceptions
2025-06-16 19:22:48,327:INFO:Importing libraries
2025-06-16 19:22:48,327:INFO:Copying training dataset
2025-06-16 19:22:48,343:INFO:Defining folds
2025-06-16 19:22:48,343:INFO:Declaring metric variables
2025-06-16 19:22:48,356:INFO:Importing untrained model
2025-06-16 19:22:48,365:INFO:Decision Tree Classifier Imported successfully
2025-06-16 19:22:48,383:INFO:Starting cross validation
2025-06-16 19:22:48,393:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:48,907:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,913:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,923:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,943:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,952:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,955:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,955:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,959:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,962:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,967:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,967:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,967:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,967:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,976:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:48,978:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,008:INFO:Calculating mean and std
2025-06-16 19:22:49,008:INFO:Creating metrics dataframe
2025-06-16 19:22:49,016:INFO:Uploading results into container
2025-06-16 19:22:49,018:INFO:Uploading model into container now
2025-06-16 19:22:49,020:INFO:_master_model_container: 5
2025-06-16 19:22:49,020:INFO:_display_container: 3
2025-06-16 19:22:49,022:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2006, splitter='best')
2025-06-16 19:22:49,022:INFO:create_model() successfully completed......................................
2025-06-16 19:22:49,290:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:49,290:INFO:Creating metrics dataframe
2025-06-16 19:22:49,313:INFO:Initializing SVM - Linear Kernel
2025-06-16 19:22:49,313:INFO:Total runtime is 0.5681398669878641 minutes
2025-06-16 19:22:49,323:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:49,325:INFO:Initializing create_model()
2025-06-16 19:22:49,325:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:49,325:INFO:Checking exceptions
2025-06-16 19:22:49,325:INFO:Importing libraries
2025-06-16 19:22:49,325:INFO:Copying training dataset
2025-06-16 19:22:49,343:INFO:Defining folds
2025-06-16 19:22:49,343:INFO:Declaring metric variables
2025-06-16 19:22:49,354:INFO:Importing untrained model
2025-06-16 19:22:49,367:INFO:SVM - Linear Kernel Imported successfully
2025-06-16 19:22:49,387:INFO:Starting cross validation
2025-06-16 19:22:49,395:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:49,964:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,978:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,978:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,980:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,981:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,983:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,989:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,989:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,989:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,989:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,993:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,999:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,999:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:49,999:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:50,003:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:50,030:INFO:Calculating mean and std
2025-06-16 19:22:50,033:INFO:Creating metrics dataframe
2025-06-16 19:22:50,038:INFO:Uploading results into container
2025-06-16 19:22:50,040:INFO:Uploading model into container now
2025-06-16 19:22:50,040:INFO:_master_model_container: 6
2025-06-16 19:22:50,040:INFO:_display_container: 3
2025-06-16 19:22:50,043:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2006, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-16 19:22:50,043:INFO:create_model() successfully completed......................................
2025-06-16 19:22:50,296:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:50,303:INFO:Creating metrics dataframe
2025-06-16 19:22:50,323:INFO:Initializing Ridge Classifier
2025-06-16 19:22:50,330:INFO:Total runtime is 0.5850745280583699 minutes
2025-06-16 19:22:50,340:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:50,340:INFO:Initializing create_model()
2025-06-16 19:22:50,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:50,340:INFO:Checking exceptions
2025-06-16 19:22:50,340:INFO:Importing libraries
2025-06-16 19:22:50,343:INFO:Copying training dataset
2025-06-16 19:22:50,356:INFO:Defining folds
2025-06-16 19:22:50,356:INFO:Declaring metric variables
2025-06-16 19:22:50,365:INFO:Importing untrained model
2025-06-16 19:22:50,373:INFO:Ridge Classifier Imported successfully
2025-06-16 19:22:50,393:INFO:Starting cross validation
2025-06-16 19:22:50,403:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:51,079:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,080:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,080:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,080:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,086:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,086:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,091:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:51,091:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,091:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,093:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

er, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:51,103:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,103:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,103:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,103:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:51,135:INFO:Calculating mean and std
2025-06-16 19:22:51,135:INFO:Creating metrics dataframe
2025-06-16 19:22:51,143:INFO:Uploading results into container
2025-06-16 19:22:51,146:INFO:Uploading model into container now
2025-06-16 19:22:51,146:INFO:_master_model_container: 7
2025-06-16 19:22:51,146:INFO:_display_container: 3
2025-06-16 19:22:51,146:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001)
2025-06-16 19:22:51,146:INFO:create_model() successfully completed......................................
2025-06-16 19:22:51,406:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:51,406:INFO:Creating metrics dataframe
2025-06-16 19:22:51,433:INFO:Initializing Random Forest Classifier
2025-06-16 19:22:51,433:INFO:Total runtime is 0.6034685015678405 minutes
2025-06-16 19:22:51,443:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:51,448:INFO:Initializing create_model()
2025-06-16 19:22:51,448:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:51,448:INFO:Checking exceptions
2025-06-16 19:22:51,448:INFO:Importing libraries
2025-06-16 19:22:51,448:INFO:Copying training dataset
2025-06-16 19:22:51,463:INFO:Defining folds
2025-06-16 19:22:51,463:INFO:Declaring metric variables
2025-06-16 19:22:51,515:INFO:Importing untrained model
2025-06-16 19:22:51,531:INFO:Random Forest Classifier Imported successfully
2025-06-16 19:22:51,545:INFO:Starting cross validation
2025-06-16 19:22:51,564:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:52,645:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,652:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,653:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,658:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:52,658:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,658:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,665:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,671:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,671:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,673:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:52,681:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,700:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,703:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,713:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,713:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,718:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:52,723:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,723:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:52,739:INFO:Calculating mean and std
2025-06-16 19:22:52,743:INFO:Creating metrics dataframe
2025-06-16 19:22:52,748:INFO:Uploading results into container
2025-06-16 19:22:52,750:INFO:Uploading model into container now
2025-06-16 19:22:52,750:INFO:_master_model_container: 8
2025-06-16 19:22:52,750:INFO:_display_container: 3
2025-06-16 19:22:52,750:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False)
2025-06-16 19:22:52,753:INFO:create_model() successfully completed......................................
2025-06-16 19:22:53,007:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:53,010:INFO:Creating metrics dataframe
2025-06-16 19:22:53,038:INFO:Initializing Quadratic Discriminant Analysis
2025-06-16 19:22:53,038:INFO:Total runtime is 0.6302102923393249 minutes
2025-06-16 19:22:53,052:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:53,053:INFO:Initializing create_model()
2025-06-16 19:22:53,053:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:53,053:INFO:Checking exceptions
2025-06-16 19:22:53,053:INFO:Importing libraries
2025-06-16 19:22:53,053:INFO:Copying training dataset
2025-06-16 19:22:53,073:INFO:Defining folds
2025-06-16 19:22:53,073:INFO:Declaring metric variables
2025-06-16 19:22:53,088:INFO:Importing untrained model
2025-06-16 19:22:53,103:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-16 19:22:53,131:INFO:Starting cross validation
2025-06-16 19:22:53,139:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:53,785:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 19:22:53,785:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 19:22:53,792:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 19:22:53,792:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 19:22:53,792:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 19:22:53,931:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,938:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,939:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,939:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,943:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,943:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,943:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,948:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,952:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,953:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,956:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,956:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,956:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,964:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:53,981:INFO:Calculating mean and std
2025-06-16 19:22:53,983:INFO:Creating metrics dataframe
2025-06-16 19:22:53,989:INFO:Uploading results into container
2025-06-16 19:22:53,991:INFO:Uploading model into container now
2025-06-16 19:22:53,993:INFO:_master_model_container: 9
2025-06-16 19:22:53,993:INFO:_display_container: 3
2025-06-16 19:22:53,993:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-16 19:22:53,993:INFO:create_model() successfully completed......................................
2025-06-16 19:22:54,266:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:54,266:INFO:Creating metrics dataframe
2025-06-16 19:22:54,300:INFO:Initializing Ada Boost Classifier
2025-06-16 19:22:54,300:INFO:Total runtime is 0.6512416799863179 minutes
2025-06-16 19:22:54,310:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:54,313:INFO:Initializing create_model()
2025-06-16 19:22:54,313:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:54,313:INFO:Checking exceptions
2025-06-16 19:22:54,313:INFO:Importing libraries
2025-06-16 19:22:54,313:INFO:Copying training dataset
2025-06-16 19:22:54,329:INFO:Defining folds
2025-06-16 19:22:54,329:INFO:Declaring metric variables
2025-06-16 19:22:54,342:INFO:Importing untrained model
2025-06-16 19:22:54,356:INFO:Ada Boost Classifier Imported successfully
2025-06-16 19:22:54,383:INFO:Starting cross validation
2025-06-16 19:22:54,393:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:54,850:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 19:22:54,850:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 19:22:54,850:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 19:22:54,850:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 19:22:54,850:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 19:22:55,298:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,304:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,304:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,316:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,316:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,321:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,325:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,333:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,335:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,343:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,346:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,353:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,353:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,368:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,373:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:55,401:INFO:Calculating mean and std
2025-06-16 19:22:55,403:INFO:Creating metrics dataframe
2025-06-16 19:22:55,413:INFO:Uploading results into container
2025-06-16 19:22:55,413:INFO:Uploading model into container now
2025-06-16 19:22:55,415:INFO:_master_model_container: 10
2025-06-16 19:22:55,415:INFO:_display_container: 3
2025-06-16 19:22:55,417:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2006)
2025-06-16 19:22:55,418:INFO:create_model() successfully completed......................................
2025-06-16 19:22:55,673:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:55,673:INFO:Creating metrics dataframe
2025-06-16 19:22:55,703:INFO:Initializing Gradient Boosting Classifier
2025-06-16 19:22:55,703:INFO:Total runtime is 0.6746335665384927 minutes
2025-06-16 19:22:55,706:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:55,713:INFO:Initializing create_model()
2025-06-16 19:22:55,714:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:55,714:INFO:Checking exceptions
2025-06-16 19:22:55,715:INFO:Importing libraries
2025-06-16 19:22:55,715:INFO:Copying training dataset
2025-06-16 19:22:55,731:INFO:Defining folds
2025-06-16 19:22:55,731:INFO:Declaring metric variables
2025-06-16 19:22:55,743:INFO:Importing untrained model
2025-06-16 19:22:55,755:INFO:Gradient Boosting Classifier Imported successfully
2025-06-16 19:22:55,775:INFO:Starting cross validation
2025-06-16 19:22:55,785:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:56,659:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,665:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,667:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,669:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,671:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,675:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,675:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,675:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,675:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:56,675:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,683:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,683:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,683:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,693:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,700:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:56,717:INFO:Calculating mean and std
2025-06-16 19:22:56,717:INFO:Creating metrics dataframe
2025-06-16 19:22:56,726:INFO:Uploading results into container
2025-06-16 19:22:56,726:INFO:Uploading model into container now
2025-06-16 19:22:56,726:INFO:_master_model_container: 11
2025-06-16 19:22:56,726:INFO:_display_container: 3
2025-06-16 19:22:56,726:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2006, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-16 19:22:56,726:INFO:create_model() successfully completed......................................
2025-06-16 19:22:57,010:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:57,012:INFO:Creating metrics dataframe
2025-06-16 19:22:57,043:INFO:Initializing Linear Discriminant Analysis
2025-06-16 19:22:57,043:INFO:Total runtime is 0.6969671964645384 minutes
2025-06-16 19:22:57,055:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:57,055:INFO:Initializing create_model()
2025-06-16 19:22:57,055:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:57,055:INFO:Checking exceptions
2025-06-16 19:22:57,055:INFO:Importing libraries
2025-06-16 19:22:57,055:INFO:Copying training dataset
2025-06-16 19:22:57,073:INFO:Defining folds
2025-06-16 19:22:57,073:INFO:Declaring metric variables
2025-06-16 19:22:57,090:INFO:Importing untrained model
2025-06-16 19:22:57,101:INFO:Linear Discriminant Analysis Imported successfully
2025-06-16 19:22:57,123:INFO:Starting cross validation
2025-06-16 19:22:57,126:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:57,705:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,713:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,713:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,719:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,723:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:57,723:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,725:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,726:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,727:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,727:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,733:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,736:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,736:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,738:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,739:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:22:57,744:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,744:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:57,764:INFO:Calculating mean and std
2025-06-16 19:22:57,768:INFO:Creating metrics dataframe
2025-06-16 19:22:57,773:INFO:Uploading results into container
2025-06-16 19:22:57,773:INFO:Uploading model into container now
2025-06-16 19:22:57,773:INFO:_master_model_container: 12
2025-06-16 19:22:57,773:INFO:_display_container: 3
2025-06-16 19:22:57,779:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-16 19:22:57,779:INFO:create_model() successfully completed......................................
2025-06-16 19:22:58,035:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:58,035:INFO:Creating metrics dataframe
2025-06-16 19:22:58,068:INFO:Initializing Extra Trees Classifier
2025-06-16 19:22:58,068:INFO:Total runtime is 0.7140460888544717 minutes
2025-06-16 19:22:58,079:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:58,080:INFO:Initializing create_model()
2025-06-16 19:22:58,080:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:58,080:INFO:Checking exceptions
2025-06-16 19:22:58,081:INFO:Importing libraries
2025-06-16 19:22:58,081:INFO:Copying training dataset
2025-06-16 19:22:58,095:INFO:Defining folds
2025-06-16 19:22:58,095:INFO:Declaring metric variables
2025-06-16 19:22:58,103:INFO:Importing untrained model
2025-06-16 19:22:58,117:INFO:Extra Trees Classifier Imported successfully
2025-06-16 19:22:58,133:INFO:Starting cross validation
2025-06-16 19:22:58,143:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:22:59,031:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,031:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,034:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,034:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,037:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,038:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,046:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,050:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,053:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,055:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,053:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,059:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:22:59,075:INFO:Calculating mean and std
2025-06-16 19:22:59,075:INFO:Creating metrics dataframe
2025-06-16 19:22:59,081:INFO:Uploading results into container
2025-06-16 19:22:59,083:INFO:Uploading model into container now
2025-06-16 19:22:59,083:INFO:_master_model_container: 13
2025-06-16 19:22:59,083:INFO:_display_container: 3
2025-06-16 19:22:59,083:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2006, verbose=0,
                     warm_start=False)
2025-06-16 19:22:59,083:INFO:create_model() successfully completed......................................
2025-06-16 19:22:59,393:INFO:SubProcess create_model() end ==================================
2025-06-16 19:22:59,393:INFO:Creating metrics dataframe
2025-06-16 19:22:59,426:INFO:Initializing Light Gradient Boosting Machine
2025-06-16 19:22:59,426:INFO:Total runtime is 0.7366788387298583 minutes
2025-06-16 19:22:59,437:INFO:SubProcess create_model() called ==================================
2025-06-16 19:22:59,437:INFO:Initializing create_model()
2025-06-16 19:22:59,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:22:59,442:INFO:Checking exceptions
2025-06-16 19:22:59,442:INFO:Importing libraries
2025-06-16 19:22:59,442:INFO:Copying training dataset
2025-06-16 19:22:59,453:INFO:Defining folds
2025-06-16 19:22:59,453:INFO:Declaring metric variables
2025-06-16 19:22:59,466:INFO:Importing untrained model
2025-06-16 19:22:59,474:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-16 19:22:59,495:INFO:Starting cross validation
2025-06-16 19:22:59,503:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:23:00,551:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,553:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,555:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,557:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,563:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,565:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,565:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,565:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,567:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,567:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:00,573:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,575:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,575:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,577:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,579:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,589:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:00,615:INFO:Calculating mean and std
2025-06-16 19:23:00,619:INFO:Creating metrics dataframe
2025-06-16 19:23:00,624:INFO:Uploading results into container
2025-06-16 19:23:00,627:INFO:Uploading model into container now
2025-06-16 19:23:00,627:INFO:_master_model_container: 14
2025-06-16 19:23:00,629:INFO:_display_container: 3
2025-06-16 19:23:00,631:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2006, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-16 19:23:00,631:INFO:create_model() successfully completed......................................
2025-06-16 19:23:00,896:INFO:SubProcess create_model() end ==================================
2025-06-16 19:23:00,896:INFO:Creating metrics dataframe
2025-06-16 19:23:00,927:INFO:Initializing Dummy Classifier
2025-06-16 19:23:00,927:INFO:Total runtime is 0.7616957386334736 minutes
2025-06-16 19:23:00,939:INFO:SubProcess create_model() called ==================================
2025-06-16 19:23:00,939:INFO:Initializing create_model()
2025-06-16 19:23:00,939:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000296357B6EC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:23:00,943:INFO:Checking exceptions
2025-06-16 19:23:00,943:INFO:Importing libraries
2025-06-16 19:23:00,943:INFO:Copying training dataset
2025-06-16 19:23:00,957:INFO:Defining folds
2025-06-16 19:23:00,957:INFO:Declaring metric variables
2025-06-16 19:23:00,968:INFO:Importing untrained model
2025-06-16 19:23:00,976:INFO:Dummy Classifier Imported successfully
2025-06-16 19:23:01,002:INFO:Starting cross validation
2025-06-16 19:23:01,003:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:23:01,500:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,511:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,517:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:01,522:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,530:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,537:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,541:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:01,545:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,545:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,555:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,555:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,558:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:01,563:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,563:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,566:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:01,574:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,583:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,593:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,599:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:23:01,603:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:23:01,623:INFO:Calculating mean and std
2025-06-16 19:23:01,625:INFO:Creating metrics dataframe
2025-06-16 19:23:01,631:INFO:Uploading results into container
2025-06-16 19:23:01,633:INFO:Uploading model into container now
2025-06-16 19:23:01,633:INFO:_master_model_container: 15
2025-06-16 19:23:01,633:INFO:_display_container: 3
2025-06-16 19:23:01,633:INFO:DummyClassifier(constant=None, random_state=2006, strategy='prior')
2025-06-16 19:23:01,633:INFO:create_model() successfully completed......................................
2025-06-16 19:23:01,894:INFO:SubProcess create_model() end ==================================
2025-06-16 19:23:01,894:INFO:Creating metrics dataframe
2025-06-16 19:23:01,953:INFO:Initializing create_model()
2025-06-16 19:23:01,961:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:23:01,961:INFO:Checking exceptions
2025-06-16 19:23:01,963:INFO:Importing libraries
2025-06-16 19:23:01,963:INFO:Copying training dataset
2025-06-16 19:23:01,979:INFO:Defining folds
2025-06-16 19:23:01,983:INFO:Declaring metric variables
2025-06-16 19:23:01,983:INFO:Importing untrained model
2025-06-16 19:23:01,983:INFO:Declaring custom model
2025-06-16 19:23:01,986:INFO:Ridge Classifier Imported successfully
2025-06-16 19:23:01,988:INFO:Cross validation set to False
2025-06-16 19:23:01,993:INFO:Fitting Model
2025-06-16 19:23:02,333:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001)
2025-06-16 19:23:02,333:INFO:create_model() successfully completed......................................
2025-06-16 19:23:02,698:INFO:_master_model_container: 15
2025-06-16 19:23:02,700:INFO:_display_container: 3
2025-06-16 19:23:02,702:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001)
2025-06-16 19:23:02,702:INFO:compare_models() successfully completed......................................
2025-06-16 19:30:16,577:INFO:Initializing create_model()
2025-06-16 19:30:16,577:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=ridge, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 19:30:16,577:INFO:Checking exceptions
2025-06-16 19:30:16,595:INFO:Importing libraries
2025-06-16 19:30:16,595:INFO:Copying training dataset
2025-06-16 19:30:16,602:INFO:Defining folds
2025-06-16 19:30:16,602:INFO:Declaring metric variables
2025-06-16 19:30:16,614:INFO:Importing untrained model
2025-06-16 19:30:16,623:INFO:Ridge Classifier Imported successfully
2025-06-16 19:30:16,639:INFO:Starting cross validation
2025-06-16 19:30:16,644:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 19:30:26,249:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,256:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,264:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:30:26,270:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,317:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,320:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,320:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,331:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:30:26,332:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,334:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:30:26,334:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,339:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,401:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,403:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,411:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:30:26,419:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,509:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,525:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,525:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 19:30:26,534:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 19:30:26,567:INFO:Calculating mean and std
2025-06-16 19:30:26,567:INFO:Creating metrics dataframe
2025-06-16 19:30:26,591:INFO:Finalizing model
2025-06-16 19:30:26,903:INFO:Uploading results into container
2025-06-16 19:30:26,903:INFO:Uploading model into container now
2025-06-16 19:30:26,928:INFO:_master_model_container: 16
2025-06-16 19:30:26,928:INFO:_display_container: 4
2025-06-16 19:30:26,928:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001)
2025-06-16 19:30:26,928:INFO:create_model() successfully completed......................................
2025-06-16 19:30:37,839:INFO:Initializing evaluate_model()
2025-06-16 19:30:37,842:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-16 19:30:37,853:INFO:Initializing plot_model()
2025-06-16 19:30:37,853:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2006, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, system=True)
2025-06-16 19:30:37,853:INFO:Checking exceptions
2025-06-16 19:30:37,855:INFO:Preloading libraries
2025-06-16 19:30:37,857:INFO:Copying training dataset
2025-06-16 19:30:37,857:INFO:Plot type: pipeline
2025-06-16 19:30:39,351:INFO:Visual Rendered Successfully
2025-06-16 19:30:39,630:INFO:plot_model() successfully completed......................................
2025-06-16 19:31:11,993:INFO:Initializing evaluate_model()
2025-06-16 19:31:11,993:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-16 19:31:12,008:INFO:Initializing plot_model()
2025-06-16 19:31:12,008:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, system=True)
2025-06-16 19:31:12,008:INFO:Checking exceptions
2025-06-16 19:31:13,522:INFO:Preloading libraries
2025-06-16 19:31:13,573:INFO:Copying training dataset
2025-06-16 19:31:13,573:INFO:Plot type: pipeline
2025-06-16 19:31:14,175:INFO:Visual Rendered Successfully
2025-06-16 19:31:14,441:INFO:plot_model() successfully completed......................................
2025-06-16 19:32:02,068:INFO:Initializing predict_model()
2025-06-16 19:32:02,068:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000296379F27A0>)
2025-06-16 19:32:02,068:INFO:Checking exceptions
2025-06-16 19:32:02,068:INFO:Preloading libraries
2025-06-16 19:32:02,074:INFO:Set up data.
2025-06-16 19:32:02,077:INFO:Set up index.
2025-06-16 19:34:26,938:INFO:Initializing save_model()
2025-06-16 19:34:26,938:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2006, verbose=0,
                       warm_start=False), model_name=model_rf, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-16 19:34:26,938:INFO:Adding model into prep_pipe
2025-06-16 19:34:27,145:INFO:model_rf.pkl saved in current working directory
2025-06-16 19:34:27,258:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_featur...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=2006, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-06-16 19:34:27,258:INFO:save_model() successfully completed......................................
2025-06-16 19:35:18,828:INFO:Initializing load_model()
2025-06-16 19:35:18,828:INFO:load_model(model_name=model_rf, platform=None, authentication=None, verbose=True)
2025-06-16 19:52:35,225:INFO:Initializing predict_model()
2025-06-16 19:52:35,225:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637931ED0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=2006, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029637A97A30>)
2025-06-16 19:52:35,225:INFO:Checking exceptions
2025-06-16 19:52:35,225:INFO:Preloading libraries
2025-06-16 19:52:35,258:INFO:Set up data.
2025-06-16 19:52:35,322:INFO:Set up index.
2025-06-16 21:13:01,362:INFO:PyCaret ClassificationExperiment
2025-06-16 21:13:01,429:INFO:Logging name: clf-default-name
2025-06-16 21:13:01,430:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 21:13:01,430:INFO:version 3.3.2
2025-06-16 21:13:01,430:INFO:Initializing setup()
2025-06-16 21:13:01,430:INFO:self.USI: 088e
2025-06-16 21:13:01,432:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 21:13:01,432:INFO:Checking environment
2025-06-16 21:13:01,432:INFO:python_version: 3.10.18
2025-06-16 21:13:01,432:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 21:13:01,432:INFO:machine: AMD64
2025-06-16 21:13:01,432:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 21:13:01,494:INFO:Memory: svmem(total=8362713088, available=994050048, percent=88.1, used=7368663040, free=994050048)
2025-06-16 21:13:01,494:INFO:Physical Core: 4
2025-06-16 21:13:01,494:INFO:Logical Core: 8
2025-06-16 21:13:01,494:INFO:Checking libraries
2025-06-16 21:13:01,494:INFO:System:
2025-06-16 21:13:01,494:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 21:13:01,494:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 21:13:01,494:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 21:13:01,494:INFO:PyCaret required dependencies:
2025-06-16 21:13:01,494:INFO:                 pip: 25.1
2025-06-16 21:13:01,494:INFO:          setuptools: 80.9.0
2025-06-16 21:13:01,494:INFO:             pycaret: 3.3.2
2025-06-16 21:13:01,494:INFO:             IPython: 8.37.0
2025-06-16 21:13:01,494:INFO:          ipywidgets: 8.1.7
2025-06-16 21:13:01,494:INFO:                tqdm: 4.67.1
2025-06-16 21:13:01,494:INFO:               numpy: 1.24.4
2025-06-16 21:13:01,494:INFO:              pandas: 2.1.4
2025-06-16 21:13:01,494:INFO:              jinja2: 3.1.6
2025-06-16 21:13:01,494:INFO:               scipy: 1.11.4
2025-06-16 21:13:01,503:INFO:              joblib: 1.3.2
2025-06-16 21:13:01,503:INFO:             sklearn: 1.4.2
2025-06-16 21:13:01,503:INFO:                pyod: 2.0.5
2025-06-16 21:13:01,503:INFO:            imblearn: 0.13.0
2025-06-16 21:13:01,503:INFO:   category_encoders: 2.7.0
2025-06-16 21:13:01,503:INFO:            lightgbm: 4.6.0
2025-06-16 21:13:01,503:INFO:               numba: 0.57.1
2025-06-16 21:13:01,503:INFO:            requests: 2.32.4
2025-06-16 21:13:01,503:INFO:          matplotlib: 3.7.5
2025-06-16 21:13:01,503:INFO:          scikitplot: 0.3.7
2025-06-16 21:13:01,503:INFO:         yellowbrick: 1.5
2025-06-16 21:13:01,503:INFO:              plotly: 5.24.1
2025-06-16 21:13:01,503:INFO:    plotly-resampler: Not installed
2025-06-16 21:13:01,503:INFO:             kaleido: 0.2.1
2025-06-16 21:13:01,503:INFO:           schemdraw: 0.15
2025-06-16 21:13:01,505:INFO:         statsmodels: 0.14.4
2025-06-16 21:13:01,505:INFO:              sktime: 0.26.0
2025-06-16 21:13:01,505:INFO:               tbats: 1.1.3
2025-06-16 21:13:01,505:INFO:            pmdarima: 2.0.4
2025-06-16 21:13:01,505:INFO:              psutil: 7.0.0
2025-06-16 21:13:01,506:INFO:          markupsafe: 3.0.2
2025-06-16 21:13:01,506:INFO:             pickle5: Not installed
2025-06-16 21:13:01,506:INFO:         cloudpickle: 3.1.1
2025-06-16 21:13:01,506:INFO:         deprecation: 2.1.0
2025-06-16 21:13:01,506:INFO:              xxhash: 3.5.0
2025-06-16 21:13:01,506:INFO:           wurlitzer: Not installed
2025-06-16 21:13:01,506:INFO:PyCaret optional dependencies:
2025-06-16 21:13:01,506:INFO:                shap: Not installed
2025-06-16 21:13:01,506:INFO:           interpret: Not installed
2025-06-16 21:13:01,506:INFO:                umap: Not installed
2025-06-16 21:13:01,506:INFO:     ydata_profiling: 4.16.1
2025-06-16 21:13:01,506:INFO:  explainerdashboard: Not installed
2025-06-16 21:13:01,506:INFO:             autoviz: Not installed
2025-06-16 21:13:01,506:INFO:           fairlearn: Not installed
2025-06-16 21:13:01,506:INFO:          deepchecks: Not installed
2025-06-16 21:13:01,508:INFO:             xgboost: Not installed
2025-06-16 21:13:01,508:INFO:            catboost: Not installed
2025-06-16 21:13:01,508:INFO:              kmodes: Not installed
2025-06-16 21:13:01,508:INFO:             mlxtend: Not installed
2025-06-16 21:13:01,508:INFO:       statsforecast: Not installed
2025-06-16 21:13:01,508:INFO:        tune_sklearn: Not installed
2025-06-16 21:13:01,508:INFO:                 ray: Not installed
2025-06-16 21:13:01,508:INFO:            hyperopt: Not installed
2025-06-16 21:13:01,508:INFO:              optuna: Not installed
2025-06-16 21:13:01,508:INFO:               skopt: Not installed
2025-06-16 21:13:01,508:INFO:              mlflow: 3.1.0
2025-06-16 21:13:01,508:INFO:              gradio: Not installed
2025-06-16 21:13:01,508:INFO:             fastapi: 0.115.12
2025-06-16 21:13:01,508:INFO:             uvicorn: 0.34.3
2025-06-16 21:13:01,508:INFO:              m2cgen: Not installed
2025-06-16 21:13:01,508:INFO:           evidently: Not installed
2025-06-16 21:13:01,508:INFO:               fugue: Not installed
2025-06-16 21:13:01,508:INFO:           streamlit: Not installed
2025-06-16 21:13:01,510:INFO:             prophet: Not installed
2025-06-16 21:13:01,510:INFO:None
2025-06-16 21:13:01,510:INFO:Set up data.
2025-06-16 21:13:01,593:INFO:Set up folding strategy.
2025-06-16 21:13:01,595:INFO:Set up train/test split.
2025-06-16 21:13:01,646:INFO:Set up index.
2025-06-16 21:13:01,646:INFO:Assigning column types.
2025-06-16 21:13:01,667:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-16 21:13:01,800:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 21:13:01,808:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:13:01,890:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:01,890:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,013:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 21:13:02,024:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:13:02,095:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,099:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,099:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-16 21:13:02,236:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:13:02,329:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,329:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:13:02,533:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,533:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,533:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-16 21:13:02,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,742:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,946:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,946:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:02,963:INFO:Preparing preprocessing pipeline...
2025-06-16 21:13:02,971:INFO:Set up label encoding.
2025-06-16 21:13:02,971:INFO:Set up simple imputation.
2025-06-16 21:13:02,987:INFO:Set up encoding of ordinal features.
2025-06-16 21:13:02,996:INFO:Set up encoding of categorical features.
2025-06-16 21:13:02,996:INFO:Set up removing multicollinearity.
2025-06-16 21:13:02,996:INFO:Set up column transformation.
2025-06-16 21:13:02,996:INFO:Set up feature normalization.
2025-06-16 21:13:03,002:INFO:Set up column name cleaning.
2025-06-16 21:13:03,783:INFO:Finished creating preprocessing pipeline.
2025-06-16 21:13:03,902:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-06-16 21:13:03,902:INFO:Creating final display dataframe.
2025-06-16 21:13:05,185:INFO:Setup _display_container:                     Description              Value
0                    Session id               4587
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment              False
27              Experiment Name   clf-default-name
28                          USI               088e
2025-06-16 21:13:05,615:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:05,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:05,900:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:05,900:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:13:05,906:INFO:setup() successfully completed in 6.26s...............
2025-06-16 21:13:21,421:INFO:Initializing create_model()
2025-06-16 21:13:21,421:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:13:21,421:INFO:Checking exceptions
2025-06-16 21:13:21,617:INFO:Importing libraries
2025-06-16 21:13:21,617:INFO:Copying training dataset
2025-06-16 21:13:21,633:INFO:Defining folds
2025-06-16 21:13:21,633:INFO:Declaring metric variables
2025-06-16 21:13:21,643:INFO:Importing untrained model
2025-06-16 21:13:21,657:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:13:21,673:INFO:Starting cross validation
2025-06-16 21:13:21,684:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:13:51,551:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,551:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,551:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,551:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,566:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,566:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,566:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,566:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,573:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:13:51,575:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:13:51,578:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,578:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,582:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,582:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,583:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:13:51,625:INFO:Calculating mean and std
2025-06-16 21:13:51,634:INFO:Creating metrics dataframe
2025-06-16 21:13:51,669:INFO:Finalizing model
2025-06-16 21:13:52,700:INFO:Uploading results into container
2025-06-16 21:13:52,709:INFO:Uploading model into container now
2025-06-16 21:13:52,734:INFO:_master_model_container: 1
2025-06-16 21:13:52,734:INFO:_display_container: 2
2025-06-16 21:13:52,737:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4587, verbose=0,
                       warm_start=False)
2025-06-16 21:13:52,737:INFO:create_model() successfully completed......................................
2025-06-16 21:14:41,322:INFO:Initializing compare_models()
2025-06-16 21:14:41,324:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-06-16 21:14:41,324:INFO:Checking exceptions
2025-06-16 21:14:41,478:INFO:Preparing display monitor
2025-06-16 21:14:41,548:INFO:Initializing Logistic Regression
2025-06-16 21:14:41,552:INFO:Total runtime is 5.942583084106445e-05 minutes
2025-06-16 21:14:41,560:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:41,560:INFO:Initializing create_model()
2025-06-16 21:14:41,560:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:41,560:INFO:Checking exceptions
2025-06-16 21:14:41,562:INFO:Importing libraries
2025-06-16 21:14:41,562:INFO:Copying training dataset
2025-06-16 21:14:41,571:INFO:Defining folds
2025-06-16 21:14:41,571:INFO:Declaring metric variables
2025-06-16 21:14:41,585:INFO:Importing untrained model
2025-06-16 21:14:41,596:INFO:Logistic Regression Imported successfully
2025-06-16 21:14:41,617:INFO:Starting cross validation
2025-06-16 21:14:41,624:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:42,362:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:42,366:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:42,370:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:42,379:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:42,381:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:42,384:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:42,386:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:42,388:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,920:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,924:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:49,932:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,973:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,991:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:49,997:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:50,048:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:50,056:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:50,061:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:50,065:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:50,097:INFO:Calculating mean and std
2025-06-16 21:14:50,098:INFO:Creating metrics dataframe
2025-06-16 21:14:50,104:INFO:Uploading results into container
2025-06-16 21:14:50,104:INFO:Uploading model into container now
2025-06-16 21:14:50,104:INFO:_master_model_container: 2
2025-06-16 21:14:50,112:INFO:_display_container: 3
2025-06-16 21:14:50,114:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4587, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-16 21:14:50,114:INFO:create_model() successfully completed......................................
2025-06-16 21:14:50,456:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:50,458:INFO:Creating metrics dataframe
2025-06-16 21:14:50,481:INFO:Initializing K Neighbors Classifier
2025-06-16 21:14:50,481:INFO:Total runtime is 0.1488699515660604 minutes
2025-06-16 21:14:50,491:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:50,493:INFO:Initializing create_model()
2025-06-16 21:14:50,493:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:50,493:INFO:Checking exceptions
2025-06-16 21:14:50,493:INFO:Importing libraries
2025-06-16 21:14:50,493:INFO:Copying training dataset
2025-06-16 21:14:50,510:INFO:Defining folds
2025-06-16 21:14:50,510:INFO:Declaring metric variables
2025-06-16 21:14:50,522:INFO:Importing untrained model
2025-06-16 21:14:50,532:INFO:K Neighbors Classifier Imported successfully
2025-06-16 21:14:50,555:INFO:Starting cross validation
2025-06-16 21:14:50,564:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:51,652:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,655:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,655:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,655:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,655:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,661:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,664:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,665:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,665:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,668:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,670:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,673:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,674:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,683:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,684:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:51,706:INFO:Calculating mean and std
2025-06-16 21:14:51,707:INFO:Creating metrics dataframe
2025-06-16 21:14:51,713:INFO:Uploading results into container
2025-06-16 21:14:51,713:INFO:Uploading model into container now
2025-06-16 21:14:51,713:INFO:_master_model_container: 3
2025-06-16 21:14:51,713:INFO:_display_container: 3
2025-06-16 21:14:51,721:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-16 21:14:51,721:INFO:create_model() successfully completed......................................
2025-06-16 21:14:51,991:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:51,991:INFO:Creating metrics dataframe
2025-06-16 21:14:52,007:INFO:Initializing Naive Bayes
2025-06-16 21:14:52,007:INFO:Total runtime is 0.17431472539901735 minutes
2025-06-16 21:14:52,019:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:52,024:INFO:Initializing create_model()
2025-06-16 21:14:52,024:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:52,024:INFO:Checking exceptions
2025-06-16 21:14:52,025:INFO:Importing libraries
2025-06-16 21:14:52,025:INFO:Copying training dataset
2025-06-16 21:14:52,034:INFO:Defining folds
2025-06-16 21:14:52,034:INFO:Declaring metric variables
2025-06-16 21:14:52,040:INFO:Importing untrained model
2025-06-16 21:14:52,057:INFO:Naive Bayes Imported successfully
2025-06-16 21:14:52,074:INFO:Starting cross validation
2025-06-16 21:14:52,081:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:52,755:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,766:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,772:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,776:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,785:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,789:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,795:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,799:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,803:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,810:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,815:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,821:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,826:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,830:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,834:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:52,864:INFO:Calculating mean and std
2025-06-16 21:14:52,864:INFO:Creating metrics dataframe
2025-06-16 21:14:52,873:INFO:Uploading results into container
2025-06-16 21:14:52,873:INFO:Uploading model into container now
2025-06-16 21:14:52,873:INFO:_master_model_container: 4
2025-06-16 21:14:52,873:INFO:_display_container: 3
2025-06-16 21:14:52,873:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-16 21:14:52,873:INFO:create_model() successfully completed......................................
2025-06-16 21:14:53,145:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:53,145:INFO:Creating metrics dataframe
2025-06-16 21:14:53,166:INFO:Initializing Decision Tree Classifier
2025-06-16 21:14:53,166:INFO:Total runtime is 0.19362024466196698 minutes
2025-06-16 21:14:53,178:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:53,180:INFO:Initializing create_model()
2025-06-16 21:14:53,180:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:53,180:INFO:Checking exceptions
2025-06-16 21:14:53,180:INFO:Importing libraries
2025-06-16 21:14:53,180:INFO:Copying training dataset
2025-06-16 21:14:53,189:INFO:Defining folds
2025-06-16 21:14:53,191:INFO:Declaring metric variables
2025-06-16 21:14:53,195:INFO:Importing untrained model
2025-06-16 21:14:53,207:INFO:Decision Tree Classifier Imported successfully
2025-06-16 21:14:53,217:INFO:Starting cross validation
2025-06-16 21:14:53,221:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:53,813:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,821:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,834:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,880:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,887:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,894:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,937:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,945:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,946:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,946:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,951:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,951:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,953:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,958:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,959:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:53,978:INFO:Calculating mean and std
2025-06-16 21:14:53,979:INFO:Creating metrics dataframe
2025-06-16 21:14:53,983:INFO:Uploading results into container
2025-06-16 21:14:53,983:INFO:Uploading model into container now
2025-06-16 21:14:53,985:INFO:_master_model_container: 5
2025-06-16 21:14:53,985:INFO:_display_container: 3
2025-06-16 21:14:53,986:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=4587, splitter='best')
2025-06-16 21:14:53,987:INFO:create_model() successfully completed......................................
2025-06-16 21:14:54,257:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:54,257:INFO:Creating metrics dataframe
2025-06-16 21:14:54,279:INFO:Initializing SVM - Linear Kernel
2025-06-16 21:14:54,279:INFO:Total runtime is 0.21216992537180585 minutes
2025-06-16 21:14:54,284:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:54,288:INFO:Initializing create_model()
2025-06-16 21:14:54,288:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:54,288:INFO:Checking exceptions
2025-06-16 21:14:54,288:INFO:Importing libraries
2025-06-16 21:14:54,288:INFO:Copying training dataset
2025-06-16 21:14:54,301:INFO:Defining folds
2025-06-16 21:14:54,303:INFO:Declaring metric variables
2025-06-16 21:14:54,307:INFO:Importing untrained model
2025-06-16 21:14:54,319:INFO:SVM - Linear Kernel Imported successfully
2025-06-16 21:14:54,327:INFO:Starting cross validation
2025-06-16 21:14:54,338:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:54,984:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:54,986:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:54,992:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:54,998:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,000:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,001:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,002:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,005:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,009:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,011:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,015:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,028:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,037:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:55,067:INFO:Calculating mean and std
2025-06-16 21:14:55,067:INFO:Creating metrics dataframe
2025-06-16 21:14:55,074:INFO:Uploading results into container
2025-06-16 21:14:55,074:INFO:Uploading model into container now
2025-06-16 21:14:55,074:INFO:_master_model_container: 6
2025-06-16 21:14:55,074:INFO:_display_container: 3
2025-06-16 21:14:55,074:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=4587, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-16 21:14:55,074:INFO:create_model() successfully completed......................................
2025-06-16 21:14:55,345:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:55,346:INFO:Creating metrics dataframe
2025-06-16 21:14:55,373:INFO:Initializing Ridge Classifier
2025-06-16 21:14:55,373:INFO:Total runtime is 0.23041723569234213 minutes
2025-06-16 21:14:55,379:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:55,379:INFO:Initializing create_model()
2025-06-16 21:14:55,382:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:55,382:INFO:Checking exceptions
2025-06-16 21:14:55,382:INFO:Importing libraries
2025-06-16 21:14:55,382:INFO:Copying training dataset
2025-06-16 21:14:55,393:INFO:Defining folds
2025-06-16 21:14:55,396:INFO:Declaring metric variables
2025-06-16 21:14:55,403:INFO:Importing untrained model
2025-06-16 21:14:55,414:INFO:Ridge Classifier Imported successfully
2025-06-16 21:14:55,436:INFO:Starting cross validation
2025-06-16 21:14:55,439:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:56,019:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,026:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,028:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,032:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:56,038:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,040:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,040:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,043:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:56,043:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,043:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,049:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,049:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,050:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,052:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,053:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:56,053:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:56,056:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:56,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,058:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,063:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:56,079:INFO:Calculating mean and std
2025-06-16 21:14:56,079:INFO:Creating metrics dataframe
2025-06-16 21:14:56,088:INFO:Uploading results into container
2025-06-16 21:14:56,090:INFO:Uploading model into container now
2025-06-16 21:14:56,090:INFO:_master_model_container: 7
2025-06-16 21:14:56,090:INFO:_display_container: 3
2025-06-16 21:14:56,090:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=4587, solver='auto',
                tol=0.0001)
2025-06-16 21:14:56,090:INFO:create_model() successfully completed......................................
2025-06-16 21:14:56,377:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:56,379:INFO:Creating metrics dataframe
2025-06-16 21:14:56,401:INFO:Initializing Random Forest Classifier
2025-06-16 21:14:56,401:INFO:Total runtime is 0.2475515127182007 minutes
2025-06-16 21:14:56,416:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:56,416:INFO:Initializing create_model()
2025-06-16 21:14:56,416:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:56,416:INFO:Checking exceptions
2025-06-16 21:14:56,416:INFO:Importing libraries
2025-06-16 21:14:56,416:INFO:Copying training dataset
2025-06-16 21:14:56,430:INFO:Defining folds
2025-06-16 21:14:56,432:INFO:Declaring metric variables
2025-06-16 21:14:56,443:INFO:Importing untrained model
2025-06-16 21:14:56,457:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:14:56,473:INFO:Starting cross validation
2025-06-16 21:14:56,482:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:57,606:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,620:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,624:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,630:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,634:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,640:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,663:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,672:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,680:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:57,687:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,690:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,690:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,701:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,701:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,705:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:57,705:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:14:57,705:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,711:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:57,730:INFO:Calculating mean and std
2025-06-16 21:14:57,732:INFO:Creating metrics dataframe
2025-06-16 21:14:57,738:INFO:Uploading results into container
2025-06-16 21:14:57,740:INFO:Uploading model into container now
2025-06-16 21:14:57,740:INFO:_master_model_container: 8
2025-06-16 21:14:57,740:INFO:_display_container: 3
2025-06-16 21:14:57,740:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4587, verbose=0,
                       warm_start=False)
2025-06-16 21:14:57,740:INFO:create_model() successfully completed......................................
2025-06-16 21:14:58,017:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:58,017:INFO:Creating metrics dataframe
2025-06-16 21:14:58,043:INFO:Initializing Quadratic Discriminant Analysis
2025-06-16 21:14:58,043:INFO:Total runtime is 0.274916406472524 minutes
2025-06-16 21:14:58,055:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:58,057:INFO:Initializing create_model()
2025-06-16 21:14:58,057:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:58,057:INFO:Checking exceptions
2025-06-16 21:14:58,058:INFO:Importing libraries
2025-06-16 21:14:58,058:INFO:Copying training dataset
2025-06-16 21:14:58,069:INFO:Defining folds
2025-06-16 21:14:58,069:INFO:Declaring metric variables
2025-06-16 21:14:58,077:INFO:Importing untrained model
2025-06-16 21:14:58,091:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-16 21:14:58,107:INFO:Starting cross validation
2025-06-16 21:14:58,118:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:58,590:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:14:58,590:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:14:58,590:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:14:58,590:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:14:58,696:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,705:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,706:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,708:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,712:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,714:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,714:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,715:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,717:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,719:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,723:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,724:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,725:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,732:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,734:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:58,749:INFO:Calculating mean and std
2025-06-16 21:14:58,750:INFO:Creating metrics dataframe
2025-06-16 21:14:58,756:INFO:Uploading results into container
2025-06-16 21:14:58,758:INFO:Uploading model into container now
2025-06-16 21:14:58,760:INFO:_master_model_container: 9
2025-06-16 21:14:58,760:INFO:_display_container: 3
2025-06-16 21:14:58,760:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-16 21:14:58,760:INFO:create_model() successfully completed......................................
2025-06-16 21:14:59,026:INFO:SubProcess create_model() end ==================================
2025-06-16 21:14:59,026:INFO:Creating metrics dataframe
2025-06-16 21:14:59,052:INFO:Initializing Ada Boost Classifier
2025-06-16 21:14:59,052:INFO:Total runtime is 0.2917222221692403 minutes
2025-06-16 21:14:59,065:INFO:SubProcess create_model() called ==================================
2025-06-16 21:14:59,065:INFO:Initializing create_model()
2025-06-16 21:14:59,065:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:14:59,066:INFO:Checking exceptions
2025-06-16 21:14:59,066:INFO:Importing libraries
2025-06-16 21:14:59,066:INFO:Copying training dataset
2025-06-16 21:14:59,075:INFO:Defining folds
2025-06-16 21:14:59,075:INFO:Declaring metric variables
2025-06-16 21:14:59,083:INFO:Importing untrained model
2025-06-16 21:14:59,099:INFO:Ada Boost Classifier Imported successfully
2025-06-16 21:14:59,107:INFO:Starting cross validation
2025-06-16 21:14:59,115:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:14:59,476:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:14:59,476:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:14:59,490:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:14:59,494:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:14:59,503:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:14:59,891:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,903:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,905:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,915:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,916:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,916:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,919:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,919:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,919:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,928:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,934:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,938:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,945:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,948:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,958:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:14:59,986:INFO:Calculating mean and std
2025-06-16 21:14:59,987:INFO:Creating metrics dataframe
2025-06-16 21:14:59,994:INFO:Uploading results into container
2025-06-16 21:14:59,999:INFO:Uploading model into container now
2025-06-16 21:14:59,999:INFO:_master_model_container: 10
2025-06-16 21:14:59,999:INFO:_display_container: 3
2025-06-16 21:15:00,000:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=4587)
2025-06-16 21:15:00,000:INFO:create_model() successfully completed......................................
2025-06-16 21:15:00,265:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:00,266:INFO:Creating metrics dataframe
2025-06-16 21:15:00,289:INFO:Initializing Gradient Boosting Classifier
2025-06-16 21:15:00,289:INFO:Total runtime is 0.3123504281044006 minutes
2025-06-16 21:15:00,301:INFO:SubProcess create_model() called ==================================
2025-06-16 21:15:00,301:INFO:Initializing create_model()
2025-06-16 21:15:00,301:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:00,301:INFO:Checking exceptions
2025-06-16 21:15:00,301:INFO:Importing libraries
2025-06-16 21:15:00,301:INFO:Copying training dataset
2025-06-16 21:15:00,315:INFO:Defining folds
2025-06-16 21:15:00,316:INFO:Declaring metric variables
2025-06-16 21:15:00,321:INFO:Importing untrained model
2025-06-16 21:15:00,332:INFO:Gradient Boosting Classifier Imported successfully
2025-06-16 21:15:00,354:INFO:Starting cross validation
2025-06-16 21:15:00,363:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:01,174:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,191:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,191:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,192:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,203:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,211:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,211:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,219:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,219:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,236:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:01,261:INFO:Calculating mean and std
2025-06-16 21:15:01,261:INFO:Creating metrics dataframe
2025-06-16 21:15:01,269:INFO:Uploading results into container
2025-06-16 21:15:01,269:INFO:Uploading model into container now
2025-06-16 21:15:01,269:INFO:_master_model_container: 11
2025-06-16 21:15:01,269:INFO:_display_container: 3
2025-06-16 21:15:01,269:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=4587, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-16 21:15:01,278:INFO:create_model() successfully completed......................................
2025-06-16 21:15:01,570:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:01,570:INFO:Creating metrics dataframe
2025-06-16 21:15:01,601:INFO:Initializing Linear Discriminant Analysis
2025-06-16 21:15:01,601:INFO:Total runtime is 0.3342026670773824 minutes
2025-06-16 21:15:01,607:INFO:SubProcess create_model() called ==================================
2025-06-16 21:15:01,607:INFO:Initializing create_model()
2025-06-16 21:15:01,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:01,607:INFO:Checking exceptions
2025-06-16 21:15:01,607:INFO:Importing libraries
2025-06-16 21:15:01,607:INFO:Copying training dataset
2025-06-16 21:15:01,625:INFO:Defining folds
2025-06-16 21:15:01,625:INFO:Declaring metric variables
2025-06-16 21:15:01,632:INFO:Importing untrained model
2025-06-16 21:15:01,640:INFO:Linear Discriminant Analysis Imported successfully
2025-06-16 21:15:01,659:INFO:Starting cross validation
2025-06-16 21:15:01,664:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:02,184:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,196:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,200:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:02,200:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,208:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,216:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,216:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,216:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,225:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:02,228:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,230:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,230:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,230:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,240:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,241:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,241:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,248:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:02,281:INFO:Calculating mean and std
2025-06-16 21:15:02,284:INFO:Creating metrics dataframe
2025-06-16 21:15:02,289:INFO:Uploading results into container
2025-06-16 21:15:02,291:INFO:Uploading model into container now
2025-06-16 21:15:02,291:INFO:_master_model_container: 12
2025-06-16 21:15:02,291:INFO:_display_container: 3
2025-06-16 21:15:02,291:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-16 21:15:02,291:INFO:create_model() successfully completed......................................
2025-06-16 21:15:02,562:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:02,562:INFO:Creating metrics dataframe
2025-06-16 21:15:02,595:INFO:Initializing Extra Trees Classifier
2025-06-16 21:15:02,598:INFO:Total runtime is 0.3508187333742777 minutes
2025-06-16 21:15:02,605:INFO:SubProcess create_model() called ==================================
2025-06-16 21:15:02,605:INFO:Initializing create_model()
2025-06-16 21:15:02,605:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:02,605:INFO:Checking exceptions
2025-06-16 21:15:02,605:INFO:Importing libraries
2025-06-16 21:15:02,605:INFO:Copying training dataset
2025-06-16 21:15:02,620:INFO:Defining folds
2025-06-16 21:15:02,620:INFO:Declaring metric variables
2025-06-16 21:15:02,629:INFO:Importing untrained model
2025-06-16 21:15:02,638:INFO:Extra Trees Classifier Imported successfully
2025-06-16 21:15:02,655:INFO:Starting cross validation
2025-06-16 21:15:02,655:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:03,556:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,565:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,569:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:03,575:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,594:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,598:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,603:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,603:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,608:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,608:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,608:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,616:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,625:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,627:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,633:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,643:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:03,665:INFO:Calculating mean and std
2025-06-16 21:15:03,665:INFO:Creating metrics dataframe
2025-06-16 21:15:03,673:INFO:Uploading results into container
2025-06-16 21:15:03,675:INFO:Uploading model into container now
2025-06-16 21:15:03,675:INFO:_master_model_container: 13
2025-06-16 21:15:03,675:INFO:_display_container: 3
2025-06-16 21:15:03,675:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4587, verbose=0,
                     warm_start=False)
2025-06-16 21:15:03,675:INFO:create_model() successfully completed......................................
2025-06-16 21:15:03,953:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:03,953:INFO:Creating metrics dataframe
2025-06-16 21:15:03,987:INFO:Initializing Light Gradient Boosting Machine
2025-06-16 21:15:03,987:INFO:Total runtime is 0.37397079865137733 minutes
2025-06-16 21:15:03,994:INFO:SubProcess create_model() called ==================================
2025-06-16 21:15:03,997:INFO:Initializing create_model()
2025-06-16 21:15:03,997:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:03,997:INFO:Checking exceptions
2025-06-16 21:15:03,997:INFO:Importing libraries
2025-06-16 21:15:03,997:INFO:Copying training dataset
2025-06-16 21:15:04,003:INFO:Defining folds
2025-06-16 21:15:04,003:INFO:Declaring metric variables
2025-06-16 21:15:04,011:INFO:Importing untrained model
2025-06-16 21:15:04,027:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-16 21:15:04,044:INFO:Starting cross validation
2025-06-16 21:15:04,052:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:04,963:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,970:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,972:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,982:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,982:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,995:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:04,998:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,003:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,010:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,023:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,032:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,068:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,077:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,087:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:05,111:INFO:Calculating mean and std
2025-06-16 21:15:05,115:INFO:Creating metrics dataframe
2025-06-16 21:15:05,120:INFO:Uploading results into container
2025-06-16 21:15:05,122:INFO:Uploading model into container now
2025-06-16 21:15:05,123:INFO:_master_model_container: 14
2025-06-16 21:15:05,123:INFO:_display_container: 3
2025-06-16 21:15:05,125:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=4587, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-16 21:15:05,125:INFO:create_model() successfully completed......................................
2025-06-16 21:15:05,424:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:05,424:INFO:Creating metrics dataframe
2025-06-16 21:15:05,465:INFO:Initializing Dummy Classifier
2025-06-16 21:15:05,465:INFO:Total runtime is 0.39860826333363847 minutes
2025-06-16 21:15:05,473:INFO:SubProcess create_model() called ==================================
2025-06-16 21:15:05,473:INFO:Initializing create_model()
2025-06-16 21:15:05,473:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029637E06DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:05,473:INFO:Checking exceptions
2025-06-16 21:15:05,473:INFO:Importing libraries
2025-06-16 21:15:05,473:INFO:Copying training dataset
2025-06-16 21:15:05,493:INFO:Defining folds
2025-06-16 21:15:05,493:INFO:Declaring metric variables
2025-06-16 21:15:05,501:INFO:Importing untrained model
2025-06-16 21:15:05,515:INFO:Dummy Classifier Imported successfully
2025-06-16 21:15:05,532:INFO:Starting cross validation
2025-06-16 21:15:05,540:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:06,067:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,073:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,083:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,083:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:06,083:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,090:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,090:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,096:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:06,096:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,098:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:06,108:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,108:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,114:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,116:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,122:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,122:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:06,122:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:06,122:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,131:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:06,156:INFO:Calculating mean and std
2025-06-16 21:15:06,156:INFO:Creating metrics dataframe
2025-06-16 21:15:06,168:INFO:Uploading results into container
2025-06-16 21:15:06,168:INFO:Uploading model into container now
2025-06-16 21:15:06,168:INFO:_master_model_container: 15
2025-06-16 21:15:06,168:INFO:_display_container: 3
2025-06-16 21:15:06,168:INFO:DummyClassifier(constant=None, random_state=4587, strategy='prior')
2025-06-16 21:15:06,172:INFO:create_model() successfully completed......................................
2025-06-16 21:15:06,492:INFO:SubProcess create_model() end ==================================
2025-06-16 21:15:06,492:INFO:Creating metrics dataframe
2025-06-16 21:15:06,561:INFO:Initializing create_model()
2025-06-16 21:15:06,561:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4587, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:06,561:INFO:Checking exceptions
2025-06-16 21:15:06,566:INFO:Importing libraries
2025-06-16 21:15:06,569:INFO:Copying training dataset
2025-06-16 21:15:06,574:INFO:Defining folds
2025-06-16 21:15:06,574:INFO:Declaring metric variables
2025-06-16 21:15:06,582:INFO:Importing untrained model
2025-06-16 21:15:06,582:INFO:Declaring custom model
2025-06-16 21:15:06,582:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:15:06,592:INFO:Cross validation set to False
2025-06-16 21:15:06,592:INFO:Fitting Model
2025-06-16 21:15:07,405:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4587, verbose=0,
                       warm_start=False)
2025-06-16 21:15:07,405:INFO:create_model() successfully completed......................................
2025-06-16 21:15:07,743:INFO:_master_model_container: 15
2025-06-16 21:15:07,743:INFO:_display_container: 3
2025-06-16 21:15:07,743:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4587, verbose=0,
                       warm_start=False)
2025-06-16 21:15:07,743:INFO:compare_models() successfully completed......................................
2025-06-16 21:15:49,207:INFO:Initializing create_model()
2025-06-16 21:15:49,207:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=et, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:15:49,207:INFO:Checking exceptions
2025-06-16 21:15:49,223:INFO:Importing libraries
2025-06-16 21:15:49,223:INFO:Copying training dataset
2025-06-16 21:15:49,231:INFO:Defining folds
2025-06-16 21:15:49,231:INFO:Declaring metric variables
2025-06-16 21:15:49,231:INFO:Importing untrained model
2025-06-16 21:15:49,244:INFO:Extra Trees Classifier Imported successfully
2025-06-16 21:15:49,266:INFO:Starting cross validation
2025-06-16 21:15:49,272:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:15:50,215:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,225:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,237:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:15:50,244:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,253:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,254:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,257:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,262:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,264:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,266:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,270:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,273:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,273:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,326:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,332:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,342:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:15:50,382:INFO:Calculating mean and std
2025-06-16 21:15:50,383:INFO:Creating metrics dataframe
2025-06-16 21:15:50,397:INFO:Finalizing model
2025-06-16 21:15:51,113:INFO:Uploading results into container
2025-06-16 21:15:51,122:INFO:Uploading model into container now
2025-06-16 21:15:51,147:INFO:_master_model_container: 16
2025-06-16 21:15:51,147:INFO:_display_container: 4
2025-06-16 21:15:51,149:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4587, verbose=0,
                     warm_start=False)
2025-06-16 21:15:51,149:INFO:create_model() successfully completed......................................
2025-06-16 21:16:04,863:INFO:Initializing evaluate_model()
2025-06-16 21:16:04,863:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4587, verbose=0,
                     warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-16 21:16:04,873:INFO:Initializing plot_model()
2025-06-16 21:16:04,873:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4587, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002962CF09330>, system=True)
2025-06-16 21:16:04,873:INFO:Checking exceptions
2025-06-16 21:16:04,964:INFO:Preloading libraries
2025-06-16 21:16:05,030:INFO:Copying training dataset
2025-06-16 21:16:05,030:INFO:Plot type: pipeline
2025-06-16 21:16:05,964:INFO:Visual Rendered Successfully
2025-06-16 21:16:06,263:INFO:plot_model() successfully completed......................................
2025-06-16 21:25:04,620:INFO:PyCaret ClassificationExperiment
2025-06-16 21:25:04,620:INFO:Logging name: clf-default-name
2025-06-16 21:25:04,620:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-16 21:25:04,620:INFO:version 3.3.2
2025-06-16 21:25:04,620:INFO:Initializing setup()
2025-06-16 21:25:04,620:INFO:self.USI: 93da
2025-06-16 21:25:04,620:INFO:self._variable_keys: {'fix_imbalance', 'fold_groups_param', 'gpu_param', 'seed', 'logging_param', 'USI', 'X_train', 'y_train', 'fold_generator', 'exp_name_log', 'target_param', '_ml_usecase', 'y_test', 'memory', 'exp_id', 'html_param', 'pipeline', 'idx', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'data', 'X_test', 'X', 'is_multiclass', 'log_plots_param', '_available_plots', 'fold_shuffle_param'}
2025-06-16 21:25:04,620:INFO:Checking environment
2025-06-16 21:25:04,620:INFO:python_version: 3.10.18
2025-06-16 21:25:04,620:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-06-16 21:25:04,620:INFO:machine: AMD64
2025-06-16 21:25:04,620:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-16 21:25:04,622:INFO:Memory: svmem(total=8362713088, available=1567412224, percent=81.3, used=6795300864, free=1567412224)
2025-06-16 21:25:04,763:INFO:Physical Core: 4
2025-06-16 21:25:04,765:INFO:Logical Core: 8
2025-06-16 21:25:04,765:INFO:Checking libraries
2025-06-16 21:25:04,765:INFO:System:
2025-06-16 21:25:04,765:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-06-16 21:25:04,765:INFO:executable: F:\ANACONDA\envs\py10env\python.exe
2025-06-16 21:25:04,765:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-16 21:25:04,765:INFO:PyCaret required dependencies:
2025-06-16 21:25:04,765:INFO:                 pip: 25.1
2025-06-16 21:25:04,765:INFO:          setuptools: 80.9.0
2025-06-16 21:25:04,765:INFO:             pycaret: 3.3.2
2025-06-16 21:25:04,765:INFO:             IPython: 8.37.0
2025-06-16 21:25:04,765:INFO:          ipywidgets: 8.1.7
2025-06-16 21:25:04,765:INFO:                tqdm: 4.67.1
2025-06-16 21:25:04,765:INFO:               numpy: 1.24.4
2025-06-16 21:25:04,765:INFO:              pandas: 2.1.4
2025-06-16 21:25:04,765:INFO:              jinja2: 3.1.6
2025-06-16 21:25:04,765:INFO:               scipy: 1.11.4
2025-06-16 21:25:04,765:INFO:              joblib: 1.3.2
2025-06-16 21:25:04,765:INFO:             sklearn: 1.4.2
2025-06-16 21:25:04,767:INFO:                pyod: 2.0.5
2025-06-16 21:25:04,767:INFO:            imblearn: 0.13.0
2025-06-16 21:25:04,767:INFO:   category_encoders: 2.7.0
2025-06-16 21:25:04,767:INFO:            lightgbm: 4.6.0
2025-06-16 21:25:04,769:INFO:               numba: 0.57.1
2025-06-16 21:25:04,769:INFO:            requests: 2.32.4
2025-06-16 21:25:04,769:INFO:          matplotlib: 3.7.5
2025-06-16 21:25:04,769:INFO:          scikitplot: 0.3.7
2025-06-16 21:25:04,769:INFO:         yellowbrick: 1.5
2025-06-16 21:25:04,769:INFO:              plotly: 5.24.1
2025-06-16 21:25:04,769:INFO:    plotly-resampler: Not installed
2025-06-16 21:25:04,769:INFO:             kaleido: 0.2.1
2025-06-16 21:25:04,769:INFO:           schemdraw: 0.15
2025-06-16 21:25:04,769:INFO:         statsmodels: 0.14.4
2025-06-16 21:25:04,769:INFO:              sktime: 0.26.0
2025-06-16 21:25:04,769:INFO:               tbats: 1.1.3
2025-06-16 21:25:04,769:INFO:            pmdarima: 2.0.4
2025-06-16 21:25:04,769:INFO:              psutil: 7.0.0
2025-06-16 21:25:04,769:INFO:          markupsafe: 3.0.2
2025-06-16 21:25:04,769:INFO:             pickle5: Not installed
2025-06-16 21:25:04,769:INFO:         cloudpickle: 3.1.1
2025-06-16 21:25:04,769:INFO:         deprecation: 2.1.0
2025-06-16 21:25:04,769:INFO:              xxhash: 3.5.0
2025-06-16 21:25:04,769:INFO:           wurlitzer: Not installed
2025-06-16 21:25:04,769:INFO:PyCaret optional dependencies:
2025-06-16 21:25:04,769:INFO:                shap: Not installed
2025-06-16 21:25:04,769:INFO:           interpret: Not installed
2025-06-16 21:25:04,769:INFO:                umap: Not installed
2025-06-16 21:25:04,771:INFO:     ydata_profiling: 4.16.1
2025-06-16 21:25:04,771:INFO:  explainerdashboard: Not installed
2025-06-16 21:25:04,771:INFO:             autoviz: Not installed
2025-06-16 21:25:04,771:INFO:           fairlearn: Not installed
2025-06-16 21:25:04,771:INFO:          deepchecks: Not installed
2025-06-16 21:25:04,771:INFO:             xgboost: Not installed
2025-06-16 21:25:04,771:INFO:            catboost: Not installed
2025-06-16 21:25:04,771:INFO:              kmodes: Not installed
2025-06-16 21:25:04,771:INFO:             mlxtend: Not installed
2025-06-16 21:25:04,773:INFO:       statsforecast: Not installed
2025-06-16 21:25:04,773:INFO:        tune_sklearn: Not installed
2025-06-16 21:25:04,773:INFO:                 ray: Not installed
2025-06-16 21:25:04,773:INFO:            hyperopt: Not installed
2025-06-16 21:25:04,773:INFO:              optuna: Not installed
2025-06-16 21:25:04,773:INFO:               skopt: Not installed
2025-06-16 21:25:04,773:INFO:              mlflow: 3.1.0
2025-06-16 21:25:04,773:INFO:              gradio: Not installed
2025-06-16 21:25:04,773:INFO:             fastapi: 0.115.12
2025-06-16 21:25:04,773:INFO:             uvicorn: 0.34.3
2025-06-16 21:25:04,773:INFO:              m2cgen: Not installed
2025-06-16 21:25:04,773:INFO:           evidently: Not installed
2025-06-16 21:25:04,773:INFO:               fugue: Not installed
2025-06-16 21:25:04,773:INFO:           streamlit: Not installed
2025-06-16 21:25:04,773:INFO:             prophet: Not installed
2025-06-16 21:25:04,775:INFO:None
2025-06-16 21:25:04,775:INFO:Set up data.
2025-06-16 21:25:04,795:INFO:Set up folding strategy.
2025-06-16 21:25:04,795:INFO:Set up train/test split.
2025-06-16 21:25:04,837:INFO:Set up index.
2025-06-16 21:25:04,837:INFO:Assigning column types.
2025-06-16 21:25:04,878:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-16 21:25:05,056:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,056:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,146:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,146:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,279:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,279:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,368:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,368:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,368:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-16 21:25:05,511:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,600:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,602:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,744:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-16 21:25:05,833:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,833:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:05,833:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-16 21:25:06,065:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:06,065:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:06,299:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:06,299:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:06,305:INFO:Preparing preprocessing pipeline...
2025-06-16 21:25:06,305:INFO:Set up label encoding.
2025-06-16 21:25:06,305:INFO:Set up simple imputation.
2025-06-16 21:25:06,321:INFO:Set up encoding of ordinal features.
2025-06-16 21:25:06,330:INFO:Set up encoding of categorical features.
2025-06-16 21:25:06,330:INFO:Set up removing multicollinearity.
2025-06-16 21:25:06,330:INFO:Set up column transformation.
2025-06-16 21:25:06,330:INFO:Set up feature normalization.
2025-06-16 21:25:06,330:INFO:Set up column name cleaning.
2025-06-16 21:25:06,883:INFO:Finished creating preprocessing pipeline.
2025-06-16 21:25:07,005:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-06-16 21:25:07,005:INFO:Creating final display dataframe.
2025-06-16 21:25:08,280:INFO:Setup _display_container:                     Description              Value
0                    Session id               6722
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (510, 11)
5        Transformed data shape          (510, 18)
6   Transformed train set shape          (357, 18)
7    Transformed test set shape          (153, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment              False
27              Experiment Name   clf-default-name
28                          USI               93da
2025-06-16 21:25:08,508:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:08,508:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:08,739:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:08,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-16 21:25:08,747:INFO:setup() successfully completed in 4.14s...............
2025-06-16 21:25:15,691:INFO:Initializing create_model()
2025-06-16 21:25:15,691:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:15,691:INFO:Checking exceptions
2025-06-16 21:25:15,709:INFO:Importing libraries
2025-06-16 21:25:15,709:INFO:Copying training dataset
2025-06-16 21:25:15,719:INFO:Defining folds
2025-06-16 21:25:15,719:INFO:Declaring metric variables
2025-06-16 21:25:15,723:INFO:Importing untrained model
2025-06-16 21:25:15,728:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:25:15,748:INFO:Starting cross validation
2025-06-16 21:25:15,748:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:34,441:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,441:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,441:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,441:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,443:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,452:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,455:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,455:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,455:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,465:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,465:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,469:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,469:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,469:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:34,498:INFO:Calculating mean and std
2025-06-16 21:25:34,503:INFO:Creating metrics dataframe
2025-06-16 21:25:34,526:INFO:Finalizing model
2025-06-16 21:25:35,418:INFO:Uploading results into container
2025-06-16 21:25:35,420:INFO:Uploading model into container now
2025-06-16 21:25:35,452:INFO:_master_model_container: 1
2025-06-16 21:25:35,452:INFO:_display_container: 2
2025-06-16 21:25:35,452:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6722, verbose=0,
                       warm_start=False)
2025-06-16 21:25:35,452:INFO:create_model() successfully completed......................................
2025-06-16 21:25:36,297:INFO:Initializing compare_models()
2025-06-16 21:25:36,297:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-06-16 21:25:36,297:INFO:Checking exceptions
2025-06-16 21:25:36,401:INFO:Preparing display monitor
2025-06-16 21:25:36,471:INFO:Initializing Logistic Regression
2025-06-16 21:25:36,471:INFO:Total runtime is 0.0 minutes
2025-06-16 21:25:36,481:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:36,483:INFO:Initializing create_model()
2025-06-16 21:25:36,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:36,483:INFO:Checking exceptions
2025-06-16 21:25:36,483:INFO:Importing libraries
2025-06-16 21:25:36,483:INFO:Copying training dataset
2025-06-16 21:25:36,497:INFO:Defining folds
2025-06-16 21:25:36,497:INFO:Declaring metric variables
2025-06-16 21:25:36,501:INFO:Importing untrained model
2025-06-16 21:25:36,518:INFO:Logistic Regression Imported successfully
2025-06-16 21:25:36,535:INFO:Starting cross validation
2025-06-16 21:25:36,544:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:37,032:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:37,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:37,053:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:37,071:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:37,076:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:37,085:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,888:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,898:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,930:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,941:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,944:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,951:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,951:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,964:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:44,998:INFO:Calculating mean and std
2025-06-16 21:25:45,001:INFO:Creating metrics dataframe
2025-06-16 21:25:45,011:INFO:Uploading results into container
2025-06-16 21:25:45,013:INFO:Uploading model into container now
2025-06-16 21:25:45,015:INFO:_master_model_container: 2
2025-06-16 21:25:45,015:INFO:_display_container: 3
2025-06-16 21:25:45,017:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6722, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-16 21:25:45,017:INFO:create_model() successfully completed......................................
2025-06-16 21:25:45,370:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:45,370:INFO:Creating metrics dataframe
2025-06-16 21:25:45,392:INFO:Initializing K Neighbors Classifier
2025-06-16 21:25:45,393:INFO:Total runtime is 0.14870636463165282 minutes
2025-06-16 21:25:45,403:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:45,403:INFO:Initializing create_model()
2025-06-16 21:25:45,403:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:45,403:INFO:Checking exceptions
2025-06-16 21:25:45,403:INFO:Importing libraries
2025-06-16 21:25:45,403:INFO:Copying training dataset
2025-06-16 21:25:45,415:INFO:Defining folds
2025-06-16 21:25:45,415:INFO:Declaring metric variables
2025-06-16 21:25:45,427:INFO:Importing untrained model
2025-06-16 21:25:45,436:INFO:K Neighbors Classifier Imported successfully
2025-06-16 21:25:45,459:INFO:Starting cross validation
2025-06-16 21:25:45,465:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:46,581:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,592:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,592:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,594:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,594:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,600:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,603:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,603:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,605:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,605:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,611:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,614:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,614:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,614:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,614:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:46,639:INFO:Calculating mean and std
2025-06-16 21:25:46,641:INFO:Creating metrics dataframe
2025-06-16 21:25:46,647:INFO:Uploading results into container
2025-06-16 21:25:46,647:INFO:Uploading model into container now
2025-06-16 21:25:46,647:INFO:_master_model_container: 3
2025-06-16 21:25:46,647:INFO:_display_container: 3
2025-06-16 21:25:46,651:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-16 21:25:46,651:INFO:create_model() successfully completed......................................
2025-06-16 21:25:46,933:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:46,933:INFO:Creating metrics dataframe
2025-06-16 21:25:46,961:INFO:Initializing Naive Bayes
2025-06-16 21:25:46,961:INFO:Total runtime is 0.17483255465825398 minutes
2025-06-16 21:25:46,965:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:46,971:INFO:Initializing create_model()
2025-06-16 21:25:46,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:46,971:INFO:Checking exceptions
2025-06-16 21:25:46,971:INFO:Importing libraries
2025-06-16 21:25:46,971:INFO:Copying training dataset
2025-06-16 21:25:46,984:INFO:Defining folds
2025-06-16 21:25:46,984:INFO:Declaring metric variables
2025-06-16 21:25:46,991:INFO:Importing untrained model
2025-06-16 21:25:47,006:INFO:Naive Bayes Imported successfully
2025-06-16 21:25:47,025:INFO:Starting cross validation
2025-06-16 21:25:47,034:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:47,677:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,685:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,691:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,694:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,696:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,696:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,701:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,701:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,702:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,709:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,709:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,711:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,712:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,718:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,721:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:47,751:INFO:Calculating mean and std
2025-06-16 21:25:47,751:INFO:Creating metrics dataframe
2025-06-16 21:25:47,760:INFO:Uploading results into container
2025-06-16 21:25:47,761:INFO:Uploading model into container now
2025-06-16 21:25:47,763:INFO:_master_model_container: 4
2025-06-16 21:25:47,763:INFO:_display_container: 3
2025-06-16 21:25:47,763:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-16 21:25:47,763:INFO:create_model() successfully completed......................................
2025-06-16 21:25:48,051:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:48,057:INFO:Creating metrics dataframe
2025-06-16 21:25:48,082:INFO:Initializing Decision Tree Classifier
2025-06-16 21:25:48,082:INFO:Total runtime is 0.19352282683054606 minutes
2025-06-16 21:25:48,093:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:48,093:INFO:Initializing create_model()
2025-06-16 21:25:48,093:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:48,095:INFO:Checking exceptions
2025-06-16 21:25:48,095:INFO:Importing libraries
2025-06-16 21:25:48,095:INFO:Copying training dataset
2025-06-16 21:25:48,106:INFO:Defining folds
2025-06-16 21:25:48,106:INFO:Declaring metric variables
2025-06-16 21:25:48,111:INFO:Importing untrained model
2025-06-16 21:25:48,129:INFO:Decision Tree Classifier Imported successfully
2025-06-16 21:25:48,151:INFO:Starting cross validation
2025-06-16 21:25:48,157:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:48,716:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,725:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,733:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,733:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,748:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,757:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,757:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,761:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,769:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,769:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,772:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,774:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,781:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,781:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,797:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:48,821:INFO:Calculating mean and std
2025-06-16 21:25:48,821:INFO:Creating metrics dataframe
2025-06-16 21:25:48,831:INFO:Uploading results into container
2025-06-16 21:25:48,831:INFO:Uploading model into container now
2025-06-16 21:25:48,831:INFO:_master_model_container: 5
2025-06-16 21:25:48,831:INFO:_display_container: 3
2025-06-16 21:25:48,831:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=6722, splitter='best')
2025-06-16 21:25:48,831:INFO:create_model() successfully completed......................................
2025-06-16 21:25:49,111:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:49,111:INFO:Creating metrics dataframe
2025-06-16 21:25:49,138:INFO:Initializing SVM - Linear Kernel
2025-06-16 21:25:49,138:INFO:Total runtime is 0.21111443837483723 minutes
2025-06-16 21:25:49,144:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:49,144:INFO:Initializing create_model()
2025-06-16 21:25:49,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:49,151:INFO:Checking exceptions
2025-06-16 21:25:49,151:INFO:Importing libraries
2025-06-16 21:25:49,151:INFO:Copying training dataset
2025-06-16 21:25:49,161:INFO:Defining folds
2025-06-16 21:25:49,161:INFO:Declaring metric variables
2025-06-16 21:25:49,171:INFO:Importing untrained model
2025-06-16 21:25:49,181:INFO:SVM - Linear Kernel Imported successfully
2025-06-16 21:25:49,201:INFO:Starting cross validation
2025-06-16 21:25:49,209:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:49,889:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,893:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,895:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,899:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,901:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,901:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,907:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,907:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,909:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,913:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,917:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,917:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,921:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,926:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:49,945:INFO:Calculating mean and std
2025-06-16 21:25:49,945:INFO:Creating metrics dataframe
2025-06-16 21:25:49,954:INFO:Uploading results into container
2025-06-16 21:25:49,954:INFO:Uploading model into container now
2025-06-16 21:25:49,954:INFO:_master_model_container: 6
2025-06-16 21:25:49,954:INFO:_display_container: 3
2025-06-16 21:25:49,954:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=6722, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-16 21:25:49,954:INFO:create_model() successfully completed......................................
2025-06-16 21:25:50,241:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:50,241:INFO:Creating metrics dataframe
2025-06-16 21:25:50,263:INFO:Initializing Ridge Classifier
2025-06-16 21:25:50,263:INFO:Total runtime is 0.22986719608306883 minutes
2025-06-16 21:25:50,271:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:50,275:INFO:Initializing create_model()
2025-06-16 21:25:50,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:50,275:INFO:Checking exceptions
2025-06-16 21:25:50,275:INFO:Importing libraries
2025-06-16 21:25:50,275:INFO:Copying training dataset
2025-06-16 21:25:50,288:INFO:Defining folds
2025-06-16 21:25:50,288:INFO:Declaring metric variables
2025-06-16 21:25:50,296:INFO:Importing untrained model
2025-06-16 21:25:50,304:INFO:Ridge Classifier Imported successfully
2025-06-16 21:25:50,323:INFO:Starting cross validation
2025-06-16 21:25:50,327:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:51,071:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,075:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,076:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,076:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,076:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,081:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,085:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,085:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,087:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,092:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,092:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,094:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,096:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,096:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,101:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:51,133:INFO:Calculating mean and std
2025-06-16 21:25:51,133:INFO:Creating metrics dataframe
2025-06-16 21:25:51,141:INFO:Uploading results into container
2025-06-16 21:25:51,143:INFO:Uploading model into container now
2025-06-16 21:25:51,145:INFO:_master_model_container: 7
2025-06-16 21:25:51,145:INFO:_display_container: 3
2025-06-16 21:25:51,145:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6722, solver='auto',
                tol=0.0001)
2025-06-16 21:25:51,145:INFO:create_model() successfully completed......................................
2025-06-16 21:25:51,423:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:51,423:INFO:Creating metrics dataframe
2025-06-16 21:25:51,449:INFO:Initializing Random Forest Classifier
2025-06-16 21:25:51,449:INFO:Total runtime is 0.24963963429133096 minutes
2025-06-16 21:25:51,458:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:51,461:INFO:Initializing create_model()
2025-06-16 21:25:51,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:51,461:INFO:Checking exceptions
2025-06-16 21:25:51,461:INFO:Importing libraries
2025-06-16 21:25:51,461:INFO:Copying training dataset
2025-06-16 21:25:51,475:INFO:Defining folds
2025-06-16 21:25:51,475:INFO:Declaring metric variables
2025-06-16 21:25:51,484:INFO:Importing untrained model
2025-06-16 21:25:51,494:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:25:51,516:INFO:Starting cross validation
2025-06-16 21:25:51,524:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:52,721:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,734:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,738:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,738:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,738:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,745:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,747:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,747:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,754:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,754:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,754:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,763:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,776:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,783:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:52,816:INFO:Calculating mean and std
2025-06-16 21:25:52,821:INFO:Creating metrics dataframe
2025-06-16 21:25:52,824:INFO:Uploading results into container
2025-06-16 21:25:52,824:INFO:Uploading model into container now
2025-06-16 21:25:52,824:INFO:_master_model_container: 8
2025-06-16 21:25:52,824:INFO:_display_container: 3
2025-06-16 21:25:52,824:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6722, verbose=0,
                       warm_start=False)
2025-06-16 21:25:52,831:INFO:create_model() successfully completed......................................
2025-06-16 21:25:53,111:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:53,117:INFO:Creating metrics dataframe
2025-06-16 21:25:53,146:INFO:Initializing Quadratic Discriminant Analysis
2025-06-16 21:25:53,147:INFO:Total runtime is 0.2779285987218221 minutes
2025-06-16 21:25:53,157:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:53,157:INFO:Initializing create_model()
2025-06-16 21:25:53,157:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:53,157:INFO:Checking exceptions
2025-06-16 21:25:53,157:INFO:Importing libraries
2025-06-16 21:25:53,157:INFO:Copying training dataset
2025-06-16 21:25:53,171:INFO:Defining folds
2025-06-16 21:25:53,173:INFO:Declaring metric variables
2025-06-16 21:25:53,181:INFO:Importing untrained model
2025-06-16 21:25:53,192:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-16 21:25:53,206:INFO:Starting cross validation
2025-06-16 21:25:53,211:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:53,843:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:25:53,843:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:25:53,843:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-16 21:25:54,031:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,038:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,038:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,038:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,048:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,048:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,048:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,051:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,051:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,059:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,063:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,063:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,065:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:54,088:INFO:Calculating mean and std
2025-06-16 21:25:54,091:INFO:Creating metrics dataframe
2025-06-16 21:25:54,096:INFO:Uploading results into container
2025-06-16 21:25:54,098:INFO:Uploading model into container now
2025-06-16 21:25:54,098:INFO:_master_model_container: 9
2025-06-16 21:25:54,098:INFO:_display_container: 3
2025-06-16 21:25:54,098:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-16 21:25:54,101:INFO:create_model() successfully completed......................................
2025-06-16 21:25:54,381:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:54,383:INFO:Creating metrics dataframe
2025-06-16 21:25:54,411:INFO:Initializing Ada Boost Classifier
2025-06-16 21:25:54,411:INFO:Total runtime is 0.2989995042483012 minutes
2025-06-16 21:25:54,423:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:54,423:INFO:Initializing create_model()
2025-06-16 21:25:54,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:54,423:INFO:Checking exceptions
2025-06-16 21:25:54,423:INFO:Importing libraries
2025-06-16 21:25:54,423:INFO:Copying training dataset
2025-06-16 21:25:54,431:INFO:Defining folds
2025-06-16 21:25:54,431:INFO:Declaring metric variables
2025-06-16 21:25:54,447:INFO:Importing untrained model
2025-06-16 21:25:54,456:INFO:Ada Boost Classifier Imported successfully
2025-06-16 21:25:54,473:INFO:Starting cross validation
2025-06-16 21:25:54,481:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:54,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:25:54,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:25:54,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:25:54,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:25:54,936:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-16 21:25:55,450:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,461:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,461:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,466:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,466:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,469:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,473:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,476:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,477:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,477:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,477:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,486:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,486:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,486:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:55,518:INFO:Calculating mean and std
2025-06-16 21:25:55,521:INFO:Creating metrics dataframe
2025-06-16 21:25:55,521:INFO:Uploading results into container
2025-06-16 21:25:55,521:INFO:Uploading model into container now
2025-06-16 21:25:55,529:INFO:_master_model_container: 10
2025-06-16 21:25:55,531:INFO:_display_container: 3
2025-06-16 21:25:55,531:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=6722)
2025-06-16 21:25:55,531:INFO:create_model() successfully completed......................................
2025-06-16 21:25:55,830:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:55,830:INFO:Creating metrics dataframe
2025-06-16 21:25:55,861:INFO:Initializing Gradient Boosting Classifier
2025-06-16 21:25:55,869:INFO:Total runtime is 0.3231640299161275 minutes
2025-06-16 21:25:55,881:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:55,881:INFO:Initializing create_model()
2025-06-16 21:25:55,881:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:55,881:INFO:Checking exceptions
2025-06-16 21:25:55,881:INFO:Importing libraries
2025-06-16 21:25:55,881:INFO:Copying training dataset
2025-06-16 21:25:55,896:INFO:Defining folds
2025-06-16 21:25:55,901:INFO:Declaring metric variables
2025-06-16 21:25:55,913:INFO:Importing untrained model
2025-06-16 21:25:55,927:INFO:Gradient Boosting Classifier Imported successfully
2025-06-16 21:25:55,949:INFO:Starting cross validation
2025-06-16 21:25:55,952:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:57,021:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,023:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,031:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,031:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,042:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,042:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,045:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,057:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,061:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,066:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,067:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,071:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,081:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,081:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:57,108:INFO:Calculating mean and std
2025-06-16 21:25:57,111:INFO:Creating metrics dataframe
2025-06-16 21:25:57,117:INFO:Uploading results into container
2025-06-16 21:25:57,119:INFO:Uploading model into container now
2025-06-16 21:25:57,119:INFO:_master_model_container: 11
2025-06-16 21:25:57,119:INFO:_display_container: 3
2025-06-16 21:25:57,121:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=6722, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-16 21:25:57,121:INFO:create_model() successfully completed......................................
2025-06-16 21:25:57,391:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:57,391:INFO:Creating metrics dataframe
2025-06-16 21:25:57,423:INFO:Initializing Linear Discriminant Analysis
2025-06-16 21:25:57,423:INFO:Total runtime is 0.3491951823234558 minutes
2025-06-16 21:25:57,431:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:57,431:INFO:Initializing create_model()
2025-06-16 21:25:57,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:57,431:INFO:Checking exceptions
2025-06-16 21:25:57,431:INFO:Importing libraries
2025-06-16 21:25:57,431:INFO:Copying training dataset
2025-06-16 21:25:57,448:INFO:Defining folds
2025-06-16 21:25:57,449:INFO:Declaring metric variables
2025-06-16 21:25:57,459:INFO:Importing untrained model
2025-06-16 21:25:57,464:INFO:Linear Discriminant Analysis Imported successfully
2025-06-16 21:25:57,481:INFO:Starting cross validation
2025-06-16 21:25:57,483:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:58,025:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,025:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,025:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,033:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,033:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,036:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,037:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,044:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,046:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,050:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,050:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,061:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,068:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:58,092:INFO:Calculating mean and std
2025-06-16 21:25:58,092:INFO:Creating metrics dataframe
2025-06-16 21:25:58,094:INFO:Uploading results into container
2025-06-16 21:25:58,094:INFO:Uploading model into container now
2025-06-16 21:25:58,101:INFO:_master_model_container: 12
2025-06-16 21:25:58,101:INFO:_display_container: 3
2025-06-16 21:25:58,101:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-16 21:25:58,101:INFO:create_model() successfully completed......................................
2025-06-16 21:25:58,343:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:58,343:INFO:Creating metrics dataframe
2025-06-16 21:25:58,366:INFO:Initializing Extra Trees Classifier
2025-06-16 21:25:58,366:INFO:Total runtime is 0.3649177670478821 minutes
2025-06-16 21:25:58,377:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:58,377:INFO:Initializing create_model()
2025-06-16 21:25:58,377:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:58,377:INFO:Checking exceptions
2025-06-16 21:25:58,377:INFO:Importing libraries
2025-06-16 21:25:58,377:INFO:Copying training dataset
2025-06-16 21:25:58,393:INFO:Defining folds
2025-06-16 21:25:58,393:INFO:Declaring metric variables
2025-06-16 21:25:58,401:INFO:Importing untrained model
2025-06-16 21:25:58,409:INFO:Extra Trees Classifier Imported successfully
2025-06-16 21:25:58,427:INFO:Starting cross validation
2025-06-16 21:25:58,431:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:25:59,430:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,431:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,431:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,437:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,441:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,442:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,444:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,444:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,451:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,452:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,453:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,461:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,466:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,474:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,482:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:25:59,500:INFO:Calculating mean and std
2025-06-16 21:25:59,501:INFO:Creating metrics dataframe
2025-06-16 21:25:59,508:INFO:Uploading results into container
2025-06-16 21:25:59,511:INFO:Uploading model into container now
2025-06-16 21:25:59,511:INFO:_master_model_container: 13
2025-06-16 21:25:59,511:INFO:_display_container: 3
2025-06-16 21:25:59,511:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False)
2025-06-16 21:25:59,511:INFO:create_model() successfully completed......................................
2025-06-16 21:25:59,821:INFO:SubProcess create_model() end ==================================
2025-06-16 21:25:59,821:INFO:Creating metrics dataframe
2025-06-16 21:25:59,852:INFO:Initializing Light Gradient Boosting Machine
2025-06-16 21:25:59,852:INFO:Total runtime is 0.3896913329760234 minutes
2025-06-16 21:25:59,864:INFO:SubProcess create_model() called ==================================
2025-06-16 21:25:59,864:INFO:Initializing create_model()
2025-06-16 21:25:59,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:25:59,864:INFO:Checking exceptions
2025-06-16 21:25:59,864:INFO:Importing libraries
2025-06-16 21:25:59,864:INFO:Copying training dataset
2025-06-16 21:25:59,881:INFO:Defining folds
2025-06-16 21:25:59,881:INFO:Declaring metric variables
2025-06-16 21:25:59,891:INFO:Importing untrained model
2025-06-16 21:25:59,939:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-16 21:25:59,971:INFO:Starting cross validation
2025-06-16 21:25:59,981:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:26:01,135:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,139:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,141:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,145:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,147:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,147:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,151:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,151:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,157:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,157:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,159:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,160:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,161:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,171:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,173:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:01,191:INFO:Calculating mean and std
2025-06-16 21:26:01,194:INFO:Creating metrics dataframe
2025-06-16 21:26:01,200:INFO:Uploading results into container
2025-06-16 21:26:01,202:INFO:Uploading model into container now
2025-06-16 21:26:01,204:INFO:_master_model_container: 14
2025-06-16 21:26:01,204:INFO:_display_container: 3
2025-06-16 21:26:01,204:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=6722, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-16 21:26:01,204:INFO:create_model() successfully completed......................................
2025-06-16 21:26:01,495:INFO:SubProcess create_model() end ==================================
2025-06-16 21:26:01,501:INFO:Creating metrics dataframe
2025-06-16 21:26:01,538:INFO:Initializing Dummy Classifier
2025-06-16 21:26:01,538:INFO:Total runtime is 0.4177857001622518 minutes
2025-06-16 21:26:01,551:INFO:SubProcess create_model() called ==================================
2025-06-16 21:26:01,554:INFO:Initializing create_model()
2025-06-16 21:26:01,554:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963A1C9DB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:26:01,554:INFO:Checking exceptions
2025-06-16 21:26:01,554:INFO:Importing libraries
2025-06-16 21:26:01,554:INFO:Copying training dataset
2025-06-16 21:26:01,571:INFO:Defining folds
2025-06-16 21:26:01,571:INFO:Declaring metric variables
2025-06-16 21:26:01,581:INFO:Importing untrained model
2025-06-16 21:26:01,595:INFO:Dummy Classifier Imported successfully
2025-06-16 21:26:01,615:INFO:Starting cross validation
2025-06-16 21:26:01,623:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:26:02,169:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,179:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,181:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,183:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,185:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,185:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,186:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:26:02,188:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,191:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,194:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,196:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,196:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:26:02,196:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,198:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:26:02,199:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:26:02,199:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-16 21:26:02,201:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,203:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,205:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,205:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:02,228:INFO:Calculating mean and std
2025-06-16 21:26:02,231:INFO:Creating metrics dataframe
2025-06-16 21:26:02,237:INFO:Uploading results into container
2025-06-16 21:26:02,239:INFO:Uploading model into container now
2025-06-16 21:26:02,241:INFO:_master_model_container: 15
2025-06-16 21:26:02,241:INFO:_display_container: 3
2025-06-16 21:26:02,241:INFO:DummyClassifier(constant=None, random_state=6722, strategy='prior')
2025-06-16 21:26:02,241:INFO:create_model() successfully completed......................................
2025-06-16 21:26:02,531:INFO:SubProcess create_model() end ==================================
2025-06-16 21:26:02,531:INFO:Creating metrics dataframe
2025-06-16 21:26:02,593:INFO:Initializing create_model()
2025-06-16 21:26:02,593:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:26:02,593:INFO:Checking exceptions
2025-06-16 21:26:02,597:INFO:Importing libraries
2025-06-16 21:26:02,597:INFO:Copying training dataset
2025-06-16 21:26:02,604:INFO:Defining folds
2025-06-16 21:26:02,604:INFO:Declaring metric variables
2025-06-16 21:26:02,604:INFO:Importing untrained model
2025-06-16 21:26:02,604:INFO:Declaring custom model
2025-06-16 21:26:02,604:INFO:Extra Trees Classifier Imported successfully
2025-06-16 21:26:02,613:INFO:Cross validation set to False
2025-06-16 21:26:02,613:INFO:Fitting Model
2025-06-16 21:26:03,276:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False)
2025-06-16 21:26:03,276:INFO:create_model() successfully completed......................................
2025-06-16 21:26:03,643:INFO:_master_model_container: 15
2025-06-16 21:26:03,643:INFO:_display_container: 3
2025-06-16 21:26:03,648:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False)
2025-06-16 21:26:03,648:INFO:compare_models() successfully completed......................................
2025-06-16 21:26:03,681:INFO:Initializing create_model()
2025-06-16 21:26:03,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=et, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:26:03,681:INFO:Checking exceptions
2025-06-16 21:26:03,731:INFO:Importing libraries
2025-06-16 21:26:03,731:INFO:Copying training dataset
2025-06-16 21:26:03,746:INFO:Defining folds
2025-06-16 21:26:03,746:INFO:Declaring metric variables
2025-06-16 21:26:03,754:INFO:Importing untrained model
2025-06-16 21:26:03,762:INFO:Extra Trees Classifier Imported successfully
2025-06-16 21:26:03,781:INFO:Starting cross validation
2025-06-16 21:26:03,791:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:26:04,861:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,871:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,887:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,891:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,891:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,891:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,892:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,893:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,901:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,901:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,901:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,909:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,911:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:26:04,934:INFO:Calculating mean and std
2025-06-16 21:26:04,934:INFO:Creating metrics dataframe
2025-06-16 21:26:04,944:INFO:Finalizing model
2025-06-16 21:26:05,821:INFO:Uploading results into container
2025-06-16 21:26:05,822:INFO:Uploading model into container now
2025-06-16 21:26:05,855:INFO:_master_model_container: 16
2025-06-16 21:26:05,855:INFO:_display_container: 4
2025-06-16 21:26:05,859:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False)
2025-06-16 21:26:05,859:INFO:create_model() successfully completed......................................
2025-06-16 21:26:06,157:INFO:Initializing evaluate_model()
2025-06-16 21:26:06,157:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-16 21:26:06,183:INFO:Initializing plot_model()
2025-06-16 21:26:06,183:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:26:06,183:INFO:Checking exceptions
2025-06-16 21:26:06,251:INFO:Preloading libraries
2025-06-16 21:26:06,293:INFO:Copying training dataset
2025-06-16 21:26:06,293:INFO:Plot type: pipeline
2025-06-16 21:26:06,963:INFO:Visual Rendered Successfully
2025-06-16 21:26:07,251:INFO:plot_model() successfully completed......................................
2025-06-16 21:28:58,911:INFO:Initializing create_model()
2025-06-16 21:28:58,911:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-16 21:28:58,911:INFO:Checking exceptions
2025-06-16 21:28:58,927:INFO:Importing libraries
2025-06-16 21:28:58,927:INFO:Copying training dataset
2025-06-16 21:28:58,935:INFO:Defining folds
2025-06-16 21:28:58,935:INFO:Declaring metric variables
2025-06-16 21:28:58,950:INFO:Importing untrained model
2025-06-16 21:28:58,959:INFO:Random Forest Classifier Imported successfully
2025-06-16 21:28:58,979:INFO:Starting cross validation
2025-06-16 21:28:58,986:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-06-16 21:29:00,163:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,169:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,169:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,174:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,174:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,182:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,182:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,186:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,188:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,206:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,214:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,225:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,227:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,231:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,241:WARNING:F:\ANACONDA\envs\py10env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-16 21:29:00,264:INFO:Calculating mean and std
2025-06-16 21:29:00,264:INFO:Creating metrics dataframe
2025-06-16 21:29:00,280:INFO:Finalizing model
2025-06-16 21:29:01,033:INFO:Uploading results into container
2025-06-16 21:29:01,033:INFO:Uploading model into container now
2025-06-16 21:29:01,054:INFO:_master_model_container: 17
2025-06-16 21:29:01,054:INFO:_display_container: 5
2025-06-16 21:29:01,057:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6722, verbose=0,
                       warm_start=False)
2025-06-16 21:29:01,057:INFO:create_model() successfully completed......................................
2025-06-16 21:29:27,429:INFO:Initializing evaluate_model()
2025-06-16 21:29:27,429:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6722, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-16 21:29:27,444:INFO:Initializing plot_model()
2025-06-16 21:29:27,444:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6722, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:29:27,444:INFO:Checking exceptions
2025-06-16 21:29:27,498:INFO:Preloading libraries
2025-06-16 21:29:27,509:INFO:Copying training dataset
2025-06-16 21:29:27,509:INFO:Plot type: pipeline
2025-06-16 21:29:28,146:INFO:Visual Rendered Successfully
2025-06-16 21:29:28,438:INFO:plot_model() successfully completed......................................
2025-06-16 21:29:58,239:INFO:Initializing plot_model()
2025-06-16 21:29:58,239:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:29:58,239:INFO:Checking exceptions
2025-06-16 21:29:58,296:INFO:Preloading libraries
2025-06-16 21:29:58,305:INFO:Copying training dataset
2025-06-16 21:29:58,305:INFO:Plot type: auc
2025-06-16 21:29:58,578:INFO:Fitting Model
2025-06-16 21:29:58,578:INFO:Scoring test/hold-out set
2025-06-16 21:30:01,016:INFO:Visual Rendered Successfully
2025-06-16 21:30:01,312:INFO:plot_model() successfully completed......................................
2025-06-16 21:30:26,131:INFO:Initializing plot_model()
2025-06-16 21:30:26,131:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:30:26,131:INFO:Checking exceptions
2025-06-16 21:30:26,179:INFO:Preloading libraries
2025-06-16 21:30:26,194:INFO:Copying training dataset
2025-06-16 21:30:26,194:INFO:Plot type: pr
2025-06-16 21:30:26,449:INFO:Fitting Model
2025-06-16 21:30:26,451:INFO:Scoring test/hold-out set
2025-06-16 21:30:28,665:INFO:Visual Rendered Successfully
2025-06-16 21:30:28,944:INFO:plot_model() successfully completed......................................
2025-06-16 21:30:48,474:INFO:Initializing plot_model()
2025-06-16 21:30:48,474:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:30:48,474:INFO:Checking exceptions
2025-06-16 21:30:48,531:INFO:Preloading libraries
2025-06-16 21:30:48,537:INFO:Copying training dataset
2025-06-16 21:30:48,537:INFO:Plot type: feature
2025-06-16 21:30:48,537:WARNING:No coef_ found. Trying feature_importances_
2025-06-16 21:30:49,112:INFO:Visual Rendered Successfully
2025-06-16 21:30:49,395:INFO:plot_model() successfully completed......................................
2025-06-16 21:31:14,770:INFO:Initializing plot_model()
2025-06-16 21:31:14,770:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, system=True)
2025-06-16 21:31:14,770:INFO:Checking exceptions
2025-06-16 21:31:14,828:INFO:Preloading libraries
2025-06-16 21:31:14,838:INFO:Copying training dataset
2025-06-16 21:31:14,838:INFO:Plot type: confusion_matrix
2025-06-16 21:31:15,109:INFO:Fitting Model
2025-06-16 21:31:15,109:INFO:Scoring test/hold-out set
2025-06-16 21:31:15,578:INFO:Visual Rendered Successfully
2025-06-16 21:31:15,914:INFO:plot_model() successfully completed......................................
2025-06-16 21:32:11,557:INFO:Initializing predict_model()
2025-06-16 21:32:11,557:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029639F6A4D0>)
2025-06-16 21:32:11,557:INFO:Checking exceptions
2025-06-16 21:32:11,557:INFO:Preloading libraries
2025-06-16 21:32:11,559:INFO:Set up data.
2025-06-16 21:32:11,566:INFO:Set up index.
2025-06-16 21:35:30,791:INFO:Initializing save_model()
2025-06-16 21:35:30,797:INFO:save_model(model=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6722, verbose=0,
                     warm_start=False), model_name=model_et, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-16 21:35:30,797:INFO:Adding model into prep_pipe
2025-06-16 21:35:31,013:INFO:model_et.pkl saved in current working directory
2025-06-16 21:35:31,153:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_featur...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=6722, verbose=0,
                                      warm_start=False))],
         verbose=False)
2025-06-16 21:35:31,153:INFO:save_model() successfully completed......................................
2025-06-16 21:36:03,080:INFO:Initializing load_model()
2025-06-16 21:36:03,085:INFO:load_model(model_name=model_et, platform=None, authentication=None, verbose=True)
2025-06-16 21:36:48,385:INFO:Initializing predict_model()
2025-06-16 21:36:48,385:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029637E27370>, estimator=Pipeline(memory=FastMemory(location=C:\Users\AHONA\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              cop...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=6722, verbose=0,
                                      warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000296379F3490>)
2025-06-16 21:36:48,385:INFO:Checking exceptions
2025-06-16 21:36:48,385:INFO:Preloading libraries
2025-06-16 21:36:48,392:INFO:Set up data.
2025-06-16 21:36:48,414:INFO:Set up index.
